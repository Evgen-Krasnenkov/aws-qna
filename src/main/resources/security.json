[
  {
    "answerId": 38447392,
    "question": "AWS services",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>If you have resources that are running&nbsp;inside AWS that need programmatic access to various AWS services, then the best practice is always to use IAM roles. However, applications running outside of an AWS environment will need access keys for programmatic access to AWS resources. For example, monitoring tools running on-premises and third-party automation tools will need access keys.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Access keys are long-term credentials for an IAM user or the AWS account root user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API (directly or using the AWS SDK).</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><br></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_1.jpg\"><span>In order to use the AWS SDK for your application, you have to create your credentials file first at&nbsp;~/.aws/credentials&nbsp;for Linux servers or at&nbsp;C:\\Users\\USER_NAME\\.aws\\credentials&nbsp;for Windows users and then save your access keys.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence, the correct answer is:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Go to the AWS Console and create a new IAM user with programmatic access. In the application server, create the credentials file at&nbsp;~/.aws/credentials&nbsp;with the access keys of the IAM user.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Create an IAM role with the appropriate permissions to access the required AWS services and assign the role to the on-premises Linux server. Whenever the application needs to access any AWS services, request for temporary security credentials from STS using the AssumeRole API</strong></b><span>&nbsp;is incorrect because the scenario says that the application is running in a Linux server on-premises and not on an EC2 instance. You cannot directly assign an IAM Role to a server on your on-premises data center. Although it may be possible to use a combination of STS and IAM Role, the use of access keys for AWS SDK is still preferred, especially if the application server is on-premises.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Create an IAM role with the appropriate permissions to access the required AWS services. Assign the role to the on-premises Linux server</strong></b><span>&nbsp;is also incorrect because, just as mentioned above, the use of an IAM Role is not a suitable solution for this scenario.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Go to the AWS Console and create a new IAM User with the appropriate permissions. In the application server, create the credentials file at ~/.aws/credentials with the username and the hashed password of the IAM User</strong></b><span>&nbsp;is incorrect. An IAM user’s username and password can only be used&nbsp;to interact with AWS via its Management Console. These credentials are intended for human use and are not suitable for use in automated systems, such as applications and scripts that make programmatic calls to AWS services.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://aws.amazon.com/developers/getting-started/nodejs/\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://aws.amazon.com/developers/getting-started/nodejs/</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://aws.amazon.com/blogs/security/guidelines-for-protecting-your-aws-account-while-using-programmatic-access/\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://aws.amazon.com/blogs/security/guidelines-for-protecting-your-aws-account-while-using-programmatic-access/</span></a></p>",
    "choices": [
      {
        "id": 1538202,
        "value": "Create an IAM role with the appropriate permissions to access the required AWS services. Assign the role to the on-premises Linux server.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538203,
        "value": "In the AWS Console, create a new IAM user with programmatic access. On the application server, create a credentials file at ~/.aws/credentials with the IAM user's access keys.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538204,
        "value": "Create an IAM role with the necessary permissions for AWS services and assign it to the on-premises Linux server. When the app needs access to any AWS service, request temporary security credentials from STS using the AssumeRole API.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538205,
        "value": "Go to the AWS Console and create a new IAM User with the appropriate permissions. In the application server, create the credentials file at ~/.aws/credentials with the username and the hashed password of the IAM User.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 0,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538203,
        "questionId": 383577,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383577,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A programmer is developing a Node.js application that will be run on a Linux server in their on-premises data center. The application will access various AWS services such as S3, DynamoDB, and ElastiCache using the AWS SDK.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following is the MOST suitable way to provide access for the developer to accomplish the specified task?</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447393,
    "question": "AWS KMS",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>When you encrypt your data, your data is protected, but you have to protect your encryption key. One strategy is to encrypt it.&nbsp;</span><i><em class=\"Editor__editor-text-italic___C9n8O\">Envelope encryption</em></i><span>&nbsp;is the practice of encrypting plaintext data with a data key, and then encrypting the data key under another key.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>You can even encrypt the data encryption key under another encryption key, and encrypt that encryption key under another encryption key. But, eventually, one key must remain in plaintext so you can decrypt the keys and your data. This top-level plaintext encryption key is known as the</span><i><em class=\"Editor__editor-text-italic___C9n8O\">&nbsp;root key</em></i><span>.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_2.jpg\"><b><strong class=\"Editor__editor-text-bold___25KrR\">AWS KMS</strong></b><span>&nbsp;helps you to protect your encryption keys by storing and managing them securely. Root keys stored in AWS KMS, known as AWS KMS keys, never leave the AWS KMS FIPS validated hardware security modules unencrypted. To use an AWS KMS key, you must call AWS KMS.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>It is recommended that you use the following pattern to encrypt data locally in your application:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>1. Use the&nbsp;GenerateDataKey&nbsp;operation to get a data encryption key.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>2. Use the plaintext data key (returned in the&nbsp;Plaintext&nbsp;field of the response) to encrypt data locally, then erase the plaintext data key from memory.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>3. Store the encrypted data key (returned in the&nbsp;CiphertextBlob&nbsp;field of the response) alongside the locally encrypted data.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence, the valid steps in this scenario are the following:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">– Use the&nbsp;GenerateDataKey&nbsp;operation to get a data encryption key then use the plaintext data key in the response to encrypt data locally.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">– Erase the plaintext data key from memory and store the encrypted data key alongside the locally encrypted data.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Use the&nbsp;GenerateDataKeyWithoutPlaintext&nbsp;operation to get a data encryption key then using the plaintext data key in the response to encrypt data locally</strong></b><span>&nbsp;is incorrect because you have to use the&nbsp;GenerateDataKey&nbsp;operation instead. This is because the&nbsp;GenerateDataKeyWithoutPlaintext&nbsp;operation will not return the&nbsp;plaintext data key just as its name implies.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Erase the encrypted data key from memory and storing the plaintext data key alongside the locally encrypted data&nbsp;</strong></b><span>is incorrect because it should be the other way around. You have to erase the&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">plaintext</strong></b><span>&nbsp;data key from memory and store the&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">encrypted</strong></b><span>&nbsp;data key alongside the locally encrypted data.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Encrypt data locally using the&nbsp;Encrypt&nbsp;operation&nbsp;</strong></b><span>is incorrect because the&nbsp;Encrypt&nbsp;operation&nbsp;is primarily used to encrypt RSA keys, database passwords, or other sensitive information. This operation can also be used&nbsp;to move encrypted data from one AWS region to another; however, this is not recommended if you want to encrypt your data locally. You have to use the&nbsp;GenerateDataKey&nbsp;operation instead.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/kms/latest/APIReference/API_GenerateDataKey.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/kms/latest/APIReference/API_GenerateDataKey.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#enveloping\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#enveloping</span></a></p>",
    "choices": [
      {
        "id": 1538206,
        "value": "Encrypt data locally using the Encrypt operation",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538207,
        "value": "Erase the encrypted data key from memory and store the plaintext data key alongside the locally encrypted data.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538208,
        "value": "Use the GenerateDataKeyWithoutPlaintext operation to get a data encryption key then use the plaintext data key in the response to encrypt data locally",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538209,
        "value": "Erase the plaintext data key from memory and store the encrypted data key alongside the locally encrypted data.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538210,
        "value": "Use the GenerateDataKey operation to get a data encryption key then use the plaintext data key in the response to encrypt data locally",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 1,
    "type": "MULTIPLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538209,
        "questionId": 383578,
        "response": null,
        "answerFeedback": null
      },
      {
        "isCorrect": true,
        "choiceId": 1538210,
        "questionId": 383578,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383578,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>You are a software developer for a multinational investment bank which has a hybrid cloud architecture with AWS. To improve the security of their applications, they decided to use AWS Key Management Service (KMS) to create and manage their encryption keys across a wide range of AWS services. You were given the responsibility to integrate AWS KMS with the financial applications of the company.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following are the recommended steps to locally encrypt data using AWS KMS that you should follow? (Select TWO.)</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447394,
    "question": "EC2 Spot instances",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Dynamic references provide a compact, powerful way for you to reference external values that are stored and managed in other services, such as the AWS Systems Manager Parameter Store or AWS Secrets Manager. When you use a dynamic reference, CloudFormation retrieves the value of the specified reference when necessary during stack and change set operations and passes the value to the appropriate resource. CloudFormation does not store the actual reference value.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The following snippet shows how you can use the&nbsp;ssm-secure&nbsp;dynamic reference to retrieve an IAM user’s password from the Parameter Store for console login.&nbsp;IAMUserPassword&nbsp;pertains to the parameter name followed by the version number.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>MyIAMUser:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp; Type: AWS::IAM::User</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp; Properties:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;&nbsp;&nbsp; UserName: 'MyUserName'</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;&nbsp;&nbsp; LoginProfile:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Password: '</span><b><strong class=\"Editor__editor-text-bold___25KrR\">{{resolve:ssm-secure:IAMUserPassword:10}}</strong></b><span>'</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>In the scenario, storing the license key as&nbsp;SecureString&nbsp;means encrypting it using a KMS key, making it more secure than storing it in plaintext. It’s also more cost-effective than Secrets Manager since you don’t pay for the number of parameters you store in the Parameter Store (Standard tier).</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence, the correct answer is:</span><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;Store the license key as a&nbsp;SecureString&nbsp;in AWS Systems Manager (SSM) Parameter Store. Use the&nbsp;ssm-secure&nbsp;dynamic reference to retrieve the secret in the CloudFormation template.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Pass the license key in the&nbsp;Parameter&nbsp;section of the CloudFormation template during stack creation. Enable the&nbsp;NoEcho&nbsp;attribute on the parameter&nbsp;</strong></b><span>is incorrect.&nbsp;Although using the&nbsp;NoEcho&nbsp;attribute can help prevent the license key from being displayed in plaintext in the CloudFormation logs and console outputs,</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Store the license key as a secret in AWS Secrets Manager. Use the&nbsp;secretsmanager&nbsp;dynamic reference to retrieve the secret in the CloudFormation template&nbsp;</strong></b><span>is incorrect. Although using Secrets Manager is a valid approach, it’s less cost-effective compared to using SSM Parameter Store. With Secrets Manager, there is a monthly cost associated with storing secrets, whereas SSM Parameter Store (Standard tier) is free of charge.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Embed the license keys in the&nbsp;Mapping&nbsp;section of the CloudFormation template. Let users choose the correct license key using the&nbsp;Parameter&nbsp;section. Enable the&nbsp;NoEcho&nbsp;attribute on the parameter&nbsp;</strong></b><span>is incorrect. Embedding sensitive data, such as license keys, within CloudFormation templates poses a security risk, as the data can be viewed by anyone with access to the template.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/security-best-practices.html#creds\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/security-best-practices.html#creds</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://catalog.workshops.aws/cfn101/en-US/intermediate/templates/dynamic-references\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://catalog.workshops.aws/cfn101/en-US/intermediate/templates/dynamic-references</span></a></p>",
    "choices": [
      {
        "id": 1538211,
        "value": "Store the license key as a SecureString in AWS Systems Manager (SSM) Parameter Store. Use the ssm-secure dynamic reference to retrieve the secret in the CloudFormation template.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538212,
        "value": "Pass the license key in the Parameter section of the CloudFormation template during stack creation. Enable the NoEcho attribute on the parameter.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538213,
        "value": "Store the license key as a secret in AWS Secrets Manager. Use the secretsmanager dynamic reference to retrieve the secret in the CloudFormation template.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538214,
        "value": "Embed the license keys in thMapping section of the CloudFormation template. Let users choose the correct license key using the Parameter section. Enable the NoEcho attribute on the parameter.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 2,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538211,
        "questionId": 383579,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383579,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A product design firm has adopted a remote work policy and wants to provide employees with access to a suite of CAD software through EC2 Spot instances. These instances will be deployed using a CloudFormation template. The development team must be able to securely obtain software license keys in the template each time it is needed.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which solution meets this requirement while offering the most secure and cost-effective approach?</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447395,
    "question": "SSE S3",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Server-side encryption</strong></b><span>&nbsp;protects data at rest. If you use&nbsp;Server-Side Encryption with Amazon S3-Managed Encryption Keys (SSE-S3), Amazon S3 will encrypt each object with a unique key and as an additional safeguard, it encrypts the key itself with a master key that it rotates regularly. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_4ex.jpg\"><span>However, if you chose to use server-side encryption with customer-provided encryption keys (SSE-C), you must provide encryption key information using the following request headers:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">x-amz-server-side</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\" style=\"font-family: Arial, sans-serif;\">​</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\">-encryption</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\" style=\"font-family: Arial, sans-serif;\">​</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\">-customer-algorithm</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">x-amz-server-side</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\" style=\"font-family: Arial, sans-serif;\">​</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\">-encryption</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\" style=\"font-family: Arial, sans-serif;\">​</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\">-customer-key</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">x-amz-server-side</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\" style=\"font-family: Arial, sans-serif;\">​</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\">-encryption</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\" style=\"font-family: Arial, sans-serif;\">​</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\">-customer-key-MD5</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence, using the&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">x-amz-server-side-encryption</strong></b><span>&nbsp;header is correct as this is the one being used for Amazon S3-Managed Encryption Keys (SSE-S3). All other options are incorrect since they are used for SSE-C.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html</span></a></p>",
    "choices": [
      {
        "id": 1538215,
        "value": "x-amz-server-side-encryption-customer-key",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538216,
        "value": "x-amz-server-side-encryption-customer-algorithm",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538217,
        "value": "x-amz-server-side-encryption-customer-key-MD5",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538218,
        "value": "x-amz-server-side-encryption",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 3,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538218,
        "questionId": 383580,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383580,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A developer needs to encrypt all objects being uploaded by their application to the S3 bucket to comply with the company’s security policy. The bucket will use server-side encryption with Amazon S3-Managed encryption keys (SSE-S3) to encrypt the data using 256-bit Advanced Encryption Standard (AES-256) block cipher.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following request headers should the developer use?</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447396,
    "question": "Architecture",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Applications that run on an EC2 instance must include AWS credentials in their AWS API requests. You could have your developers store AWS credentials directly within the EC2 instance and allow applications in that instance to use those credentials. But developers would then have to manage the credentials and ensure that they securely pass the credentials to each instance and update each EC2 instance when it’s time to rotate the credentials. That’s a lot of additional work.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Instead, you can and should use an IAM role to manage&nbsp;</span><i><em class=\"Editor__editor-text-italic___C9n8O\">temporary</em></i><span>&nbsp;credentials for applications that run on an EC2 instance. When you use a role, you don’t have to distribute long-term credentials (such as a username and password or access keys) to an EC2 instance. Instead, the role supplies temporary permissions that applications can use when they make calls to other AWS resources. When you launch an EC2 instance, you specify an IAM role to associate with the instance. Applications that run on the instance can then use the role-supplied temporary credentials to sign API requests.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_5.jpg\"><span>Using roles to grant permissions to applications that run on EC2 instances requires a bit of extra configuration. An application running on an EC2 instance is abstracted from AWS by the virtualized operating system. Because of this extra separation, an additional step is needed to assign an AWS role and its associated permissions to an EC2 instance and make them available to its applications. This extra step is the creation of an&nbsp;</span><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><i><em class=\"Editor__editor-text-italic___C9n8O\">instance profile</em></i></a><span>&nbsp;that is attached to the instance. The instance profile contains the role and can provide the role’s temporary credentials to an application that runs on the instance. Those temporary credentials can then be used in the application’s API calls to access resources and to limit access to only those resources that the role specifies. Note that only one role can be assigned to an EC2 instance at a time, and all applications on the instance share the same role and permissions.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Using roles in this way has several benefits. Because role credentials are temporary and rotated automatically, you don’t have to manage credentials, and you don’t have to worry about long-term security risks. In addition, if you use a single role for multiple instances, you can make a change to that one role and the change is propagated automatically to all the instances.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence,&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">using an IAM Role to grant the application the necessary permissions to upload data to S3</strong></b><span>&nbsp;is the correct answer for this scenario as this provides the safest way to integrate your application hosted in EC2 and S3.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Storing the access keys in the instance and then using the AWS SDK to upload the results to S3</strong></b><span>&nbsp;is incorrect because this will expose the AWS access credentials to all users who have access to the EC2 instance. Since this option entails a security risk, this is incorrect as is not the safest method.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Installing the AWS CLI then using it to upload the results to S3&nbsp;</strong></b><span>is incorrect. Although this option is valid, this method also presents a security risk just as shown above. By default, an AWS CLI requires you to store the AWS access keys in your instance which will be used in executing the commands. Hence, this option is incorrect.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Using an IAM Inline Policy to grant the application the necessary permissions to upload data to S3</strong></b><span>&nbsp;is incorrect because inline policies are useful if you want to maintain a strict one-to-one relationship between a policy and the principal entity that it’s applied to. This option doesn’t provide a secure way of allowing the application that is hosted in EC2 to upload data to an S3 bucket. You should use an IAM Role instead.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html</span></a></p>",
    "choices": [
      {
        "id": 1538219,
        "value": "Use an IAM Inline Policy to grant the application the necessary permissions to upload data to S3.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538220,
        "value": "Install the AWS CLI then use it to upload the results to S3.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538221,
        "value": "Use an IAM Role to grant the application the necessary permissions to upload data to S3.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538222,
        "value": "Store the access keys in the instance then use the AWS SDK to upload the results to S3.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 4,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538221,
        "questionId": 383581,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383581,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A developer is building the cloud architecture of an application which will be hosted in a large EC2 instance. The application will process the data and it will upload results to an S3 bucket.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following is the SAFEST way to implement this architecture?</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447397,
    "question": "API Gateway Lambda Authorizer",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A Lambda authorizer is an API Gateway feature that uses a Lambda function to control access to your API. When a client makes a request to one of your API’s methods, API Gateway calls your Lambda authorizer, which takes the caller’s identity as input and returns an IAM policy as output.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>There are two types of Lambda authorizers:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;– A&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">token-based</strong></b><span>&nbsp;Lambda authorizer (also called a TOKEN authorizer) receives the caller’s identity in a bearer token, such as a JSON Web Token (JWT) or an OAuth token.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;– A&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">request parameter-based</strong></b><span>&nbsp;Lambda authorizer (also called a REQUEST authorizer) receives the caller’s identity in a combination of headers, query string parameters, stageVariables, and $context variables.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_6.jpg\"><span>It is possible to use an AWS Lambda function from an AWS account that is different from the one in which you created your Lambda authorizer function, by using a Cross-Account Lambda Authorizer.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Therefore, the correct answer is to use a&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Request Parameter-based Authorization</strong></b><span>&nbsp;as it uses a combination of headers, query string parameters, stageVariables, and $context variables for authentication.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Amazon Cognito User Pools Authorizer&nbsp;</strong></b><span>is incorrect because this&nbsp;is just an alternative to using IAM roles and policies or Lambda authorizers. An Amazon Cognito user pool is primarily used to control who can access your API in Amazon API Gateway using identity token or access token, and not&nbsp;header and query string parameters from the API caller.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Token-based authorization&nbsp;</strong></b><span>is incorrect because this is only suitable if you want to implement a custom authorization scheme that uses a bearer token authentication strategy such as OAuth or SAML.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Cross-Account Lambda Authorizer&nbsp;</strong></b><span>is incorrect because this just enables you to use an AWS Lambda function from a different AWS account as your API authorizer function. Moreover, this is not a valid&nbsp;Lambda authorizer type.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-lambda-authorizer-input.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-lambda-authorizer-input.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-lambda-authorizer-cross-account-lambda-authorizer.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-lambda-authorizer-cross-account-lambda-authorizer.html</span></a></p>",
    "choices": [
      {
        "id": 1538223,
        "value": "Token-based Authorization",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538224,
        "value": "Cross-Account Lambda Authorizer",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538225,
        "value": "Request Parameter-based Authorization",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538226,
        "value": "Amazon Cognito User Pools Authorizer",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 5,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538225,
        "questionId": 383582,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383582,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A developer is using API Gateway Lambda Authorizer to securely authenticate the API requests to their web application. The authentication process should be implemented using a custom authorization scheme which accepts header and query string parameters from the API caller.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following methods should the developer use to properly implement the above requirement?</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447398,
    "question": "LDAP",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>If your identity store is not compatible with SAML 2.0, then you can build a custom identity broker application to perform a similar function. The broker application authenticates users, requests temporary credentials for users from AWS, and then provides them to the user to access AWS resources.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The application verifies that employees are signed into the existing corporate network’s identity and authentication system, which might use LDAP, Active Directory, or another system. The identity broker application then obtains temporary security credentials for the employees.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>To get temporary security credentials, the identity broker application calls either&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">AssumeRole</strong></b><span>&nbsp;or&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">GetFederationToken</strong></b><span>&nbsp;to obtain temporary security credentials, depending on how you want to manage the policies for users and when the temporary credentials should expire. The call returns temporary security credentials consisting of an AWS access key ID, a secret access key, and a session token. The identity broker application makes these temporary security credentials available to the internal company application. The app can then use the temporary credentials to make calls to AWS directly. The app caches the credentials until they expire, and then requests a new set of temporary credentials.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;Hence, the correct answer is:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Create a custom identity broker application in your on-premises data center and use STS to issue short-lived AWS credentials.</strong></b><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_7.jpg\"></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Setting up an IAM policy that references the LDAP identifiers and AWS credentials&nbsp;</strong></b><span>is incorrect because using an IAM policy is not enough to integrate your LDAP service into IAM. You need to use SAML, STS, or a custom identity broker instead.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Implementing the AWS IAM Identity Center service to manage access between AWS and your LDAP</strong></b><span>&nbsp;is incorrect because the identity store that you are using is not SAML-compatible.&nbsp;AWS IAM Identity Center does not support non-SAML authentication methods.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Creating IAM roles to rotate the IAM credentials whenever LDAP credentials are updated&nbsp;</strong></b><span>is incorrect because manually rotating the IAM credentials is not an optimal solution to integrate your on-premises and VPC network. You need to use SAML, STS, or a custom identity broker.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:&nbsp;</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_common-scenarios_federated-users.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_common-scenarios_federated-users.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://aws.amazon.com/blogs/aws/aws-identity-and-access-management-now-with-identity-federation/\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://aws.amazon.com/blogs/aws/aws-identity-and-access-management-now-with-identity-federation/</span></a></p>",
    "choices": [
      {
        "id": 1538227,
        "value": "Create IAM roles to rotate the IAM credentials whenever LDAP credentials are updated.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538228,
        "value": "Set up an IAM policy that references the LDAP identifiers and AWS credentials",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538229,
        "value": "Implement the AWS IAM Identity Center service to manage access between AWS and your LDAP",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538230,
        "value": "Create a custom identity broker application in your on-premises data center and use STS to issue short-lived AWS credentials.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 6,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538230,
        "questionId": 383583,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383583,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A company is currently in the process of integrating their on-premises data center to their cloud infrastructure in AWS. One of the requirements is to integrate the on-premises Lightweight Directory Access Protocol (LDAP) directory service to their AWS VPC using IAM.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following provides the MOST suitable solution to implement if the identity store that they are using is not compatible with SAML?</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447399,
    "question": "RDS",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Server-side encryption is about protecting data at rest. Using server-side encryption with customer-provided encryption keys (SSE-C) allows you to set your own encryption keys. With the encryption key you provide as part of your request, Amazon S3 manages both the encryption, as it writes to disks, and decryption, when you access your objects. Therefore, you don’t need to maintain any code to perform data encryption and decryption. The only thing you do is manage the encryption keys you provide.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;When you upload an object, Amazon S3 uses the encryption key you provide to apply AES-256 encryption to your data and removes the encryption key from memory. It is important to note that&nbsp;Amazon S3 does not store the encryption key you provide. Instead, it is stored in a randomly salted HMAC value of the encryption key in order to validate future requests. The salted HMAC value cannot be used to derive the value of the encryption key or to decrypt the contents of the encrypted object. That means, if you lose the encryption key, you lose the object.</span><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_8.jpg\"></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>When you retrieve an object, you must provide the same encryption key as part of your request. Amazon S3 first verifies that the encryption key you provided matches, and then decrypts the object before returning the object data to you.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence, the valid consideration that the developer should keep in mind when implementing this architecture is:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">if you lose the encryption key, you lose the object</strong></b><span>.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">the salted HMAC value can be used to derive the value of the encryption key</strong></b><span>&nbsp;is incorrect because the salted HMAC is just used to validate future encryption requests. It cannot be used to derive the value of the encryption key or to decrypt the contents of the encrypted object.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">the salted HMAC value can be used to decrypt the contents of the encrypted object</strong></b><span>&nbsp;is incorrect because just as mentioned above, the HMAC&nbsp;cannot be used to derive the value of the encryption key or to decrypt the contents of the encrypted object.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">if you lose the encryption key, the salted HMAC value can be used to decrypt the object</strong></b><span>&nbsp;is incorrect because&nbsp;if you lose the encryption key, you lose the object. You cannot use the salted HMAC value to decrypt the object.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html#RESTObjectPUT-responses-examples\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html#RESTObjectPUT-responses-examples</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://aws.amazon.com/blogs/security/how-to-prevent-uploads-of-unencrypted-objects-to-amazon-s3/\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://aws.amazon.com/blogs/security/how-to-prevent-uploads-of-unencrypted-objects-to-amazon-s3/</span></a></p>",
    "choices": [
      {
        "id": 1538231,
        "value": "The salted HMAC value can be used to derive the value of the encryption key.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538232,
        "value": "If you lose the encryption key, the salted HMAC value can be used to decrypt the object.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538233,
        "value": "If you lose the encryption key, you lose the object.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538234,
        "value": "The salted HMAC value can be used to decrypt the contents of the encrypted object",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 7,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538233,
        "questionId": 383584,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383584,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A developer is designing a multi-tiered system which utilizes various AWS resources. The application will be hosted in Elastic Beanstalk, which uses an RDS database and an S3 bucket that is configured to use Server-Side Encryption with Customer-Provided Encryption Keys (SSE-C). In this configuration, Amazon S3 does not store the encryption key you provide but instead, stores a randomly salted hash-based message authentication code (HMAC) value of the encryption key in order to validate future requests.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following is a valid consideration that the developer should keep in mind when implementing this architecture?</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447400,
    "question": "SSE-KMS",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Server-side encryption is about protecting data at rest. AWS Key Management Service (AWS KMS) is a service that combines secure, highly available hardware and software to provide a key management system scaled for the cloud. AWS KMS uses KMS keys to encrypt your Amazon S3 objects. You use AWS KMS via the&nbsp;</span><a href=\"https://console.aws.amazon.com/kms\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>AWS Management Console</span></a><span>&nbsp;or&nbsp;</span><a href=\"https://docs.aws.amazon.com/kms/latest/APIReference/\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>AWS KMS APIs</span></a><span>&nbsp;to centrally create encryption keys, define the policies that control how keys can be used, and audit key usage to prove they are being used correctly. You can use these keys to protect your data in Amazon S3 buckets.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_9.jpg\"><span>The first time you add an SSE-KMS–encrypted object to a bucket in a region, a default KMS key is created for you automatically. This key is used for SSE-KMS encryption unless you select a KMS key that you created separately using AWS Key Management Service. Creating your own KMS key gives you more flexibility, including the ability to create, rotate, disable, and define access controls and audit the encryption keys used to protect your data.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>To upload an object to the S3 bucket, which uses&nbsp;SSE-KMS, you have&nbsp;to send a request with an&nbsp;x-amz-server-side-encryption&nbsp;header with the value of&nbsp;aws:kms. There’s also an optional&nbsp;x-amz-server-side-encryption-aws-kms-key-id&nbsp;header, which specifies the ID of the AWS KMS master encryption key that was used for the object. The Amazon S3 API also supports encryption context with the&nbsp;x-amz-server-side-encryption-context&nbsp;header.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>When you upload an object, you can specify the KMS key using the&nbsp;x-amz-server-side-encryption-aws-kms-key-id&nbsp;header. If the header is not present in the request, Amazon S3 assumes the default KMS key. Regardless, the KMS key ID that Amazon S3 uses for object encryption must match the KMS key ID in the policy, otherwise, Amazon S3 denies the request.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence, the correct is:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Include the&nbsp;x-amz-server-side-encryption&nbsp;header with a value of&nbsp;aws:kms&nbsp;in your upload request.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Including the&nbsp;x-amz-server-side</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\" style=\"font-family: Arial, sans-serif;\">​</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\">-encryption</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\" style=\"font-family: Arial, sans-serif;\">​</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\">-customer-algorithm,&nbsp;x-amz-server-side-encryption-customer-key&nbsp;and&nbsp;x-amz-server-side-encryption-customer-key-MD5&nbsp;headers with appropriate values in the upload request&nbsp;</strong></b><span>is incorrect because these headers are only required if your S3 bucket is using&nbsp;Server-Side Encryption with Customer-Provided Keys (SSE-C).</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Including the&nbsp;x-amz-server-side-encryption&nbsp;header with a value of&nbsp;aws:kms&nbsp;as well as the&nbsp;x-amz-server-side-encryption-aws-kms-key-id&nbsp;header containing the ID of the default AWS KMS key in your upload request&nbsp;</strong></b><span>is incorrect. Although this is a valid option, you actually don’t need to add the&nbsp;x-amz-server-side-encryption-aws-kms-key-id&nbsp;header if you will be using the default AWS KMS key. Take note that the scenario explicitly mentioned to provide a solution with the LEAST amount of configuration.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Including the&nbsp;x-amz-server-side-encryption&nbsp;header with a value of&nbsp;AES256&nbsp;in your upload request&nbsp;</strong></b><span>is incorrect because the value should be set as&nbsp;</span><i><em class=\"Editor__editor-text-italic___C9n8O\">aws:kms</em></i><span>&nbsp;instead. The value of&nbsp;AES256&nbsp;is only applicable for SSE-S3 and SSE-C.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html#RESTObjectPUT-responses-examples\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html#RESTObjectPUT-responses-examples</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://aws.amazon.com/blogs/security/how-to-prevent-uploads-of-unencrypted-objects-to-amazon-s3/\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://aws.amazon.com/blogs/security/how-to-prevent-uploads-of-unencrypted-objects-to-amazon-s3/</span></a></p>",
    "choices": [
      {
        "id": 1538235,
        "value": "Include the x-amz-server-side-encryption header with a value of aws:kms in your upload request.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538236,
        "value": "Include the x-amz-server-side-encryption header with a value of aws:kms as well as the x-amz-server-side-encryption-aws-kms-key-id header containing the ID of the default AWS KMS key in your upload request.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538237,
        "value": "Include the x-amz-server-side-encryption header with a value of AES256 in your upload request.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538238,
        "value": "Include the x-amz-server-side-encryption-customer-algorithm, x-amz-server-side-encryption-customer-key, and x-amz-server-side-encryption-customer-key-MD5 headers with appropriate values in the upload request",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 8,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538235,
        "questionId": 383585,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383585,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>You are developing a new batch job for the enterprise application suite in your company, which is hosted in an Auto Scaling group of EC2 instances behind an ELB. The application is using an S3 bucket configured with Server-Side Encryption with AWS KMS Keys (SSE-KMS). The batch job must upload files to the bucket using the default AWS KMS key to protect the data at rest.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>What should you do to satisfy this requirement with the LEAST amount of configuration?</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447401,
    "question": "Second authentication method ",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>You can add multi-factor authentication (MFA) to a user pool to protect the identity of your users. MFA adds a second authentication method that doesn’t rely solely on usernames and passwords. You can choose to use SMS text messages, or time-based one-time (TOTP) passwords as second factors in signing in your users. You can also use adaptive authentication with its risk-based model to predict when you might need another authentication factor. It’s part of the user pool’s advanced security features, which also include protections against compromised credentials.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_10.jpg\"><span>Multi-factor authentication (MFA) increases security for your app by adding another authentication method, and not relying solely on user name and password. You can choose to use SMS text messages, or time-based one-time (TOTP) passwords as second factors in signing in your users.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>With adaptive authentication, you can configure your user pool to require second-factor authentication in response to an increased risk level.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence, the correct answer in this scenario is to&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">integrate multi-factor authentication (MFA) to a user pool in Cognito to protect the identity of your users.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Creating a custom application that integrates with Amazon Cognito which implements the second layer of authentication</strong></b><span>&nbsp;is incorrect. Although this option is viable, it is not the most suitable solution in this scenario since you can simply use MFA as a second-factor authentication for the mobile app.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Using a new IAM policy to a user pool in Cognito&nbsp;</strong></b><span>is incorrect because an IAM Policy alone cannot implement a second-factor authentication. You have to configure Cognito to use MFA instead.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Using Cognito with SNS to allow additional authentication via SMS&nbsp;</strong></b><span>is incorrect. Although this is part of the MFA setup, using this solution alone is not enough if you didn’t enable MFA in the first place.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/managing-security.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/cognito/latest/developerguide/managing-security.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html</span></a></p>",
    "choices": [
      {
        "id": 1538239,
        "value": "Create a custom application that integrates with Amazon Cognito which implements the second layer of authentication.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538240,
        "value": "Use a new IAM policy to a user pool in Cognito.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538241,
        "value": "Integrate multi-factor authentication (MFA) to a user pool in Cognito to protect the identity of your users.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538242,
        "value": "Use Cognito with SNS to allow additional authentication via SMS.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 9,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538241,
        "questionId": 383586,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383586,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A financial mobile application has a serverless backend API which consists of DynamoDB, Lambda, and Cognito. Due to the confidential financial transactions handled by the mobile application, there is a new requirement provided by the company to add a second authentication method that doesn’t rely solely on user name and password.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following is the MOST suitable solution that the developer should implement?</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447402,
    "question": "Database credentials",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">AWS Systems Manager Parameter Store</strong></b><span>&nbsp;provides secure, hierarchical storage for configuration data management and secrets management. You can store data such as passwords, database strings, and license codes as parameter values. You can store values as plain text or encrypted data. You can then reference values by using the unique name that you specified when you created the parameter.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;Parameter Store offers the following benefits and features:</span><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_11.jpg\"></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Use a secure, scalable, hosted secrets management service (No servers to manage).</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Improve your security posture by separating your data from your code.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Store configuration data and secure strings in hierarchies and track versions.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Control and audit access at granular levels.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Configure change notifications and trigger automated actions.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Tag parameters individually, and then secure access from different levels, including operational, parameter, Amazon EC2 tag, or path levels.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Reference AWS Secrets Manager secrets by using Parameter Store parameters.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence, the correct solution for this scenario is to&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">use AWS Systems Manager Parameter Store as a Secure String Parameter.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Encrypting the database credentials and storing them in an S3 bucket which the Lambda functions can fetch&nbsp;</strong></b><span>is incorrect because it is a security risk to store sensitive database passwords and credentials in S3, even though the data is encrypted. A more suitable and secure way is to use the AWS Secrets Manager or the Systems Manager Parameter Store.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Storing the database credentials as environment variables with KMS encryption which will be shared by the Lambda functions&nbsp;</strong></b><span>is incorrect because even though the credentials will be encrypted, these environment variables will only be used by an individual Lambda function and cannot be shared.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Using IAM DB Authentication in RDS to allow encrypted connections from each Lambda function&nbsp;</strong></b><span>is incorrect. While using IAM DB Authentication can significantly enhance security for database connections in AWS environments, it’s more about controlling access rather than managing the sharing of encrypted credentials like a database connection string across multiple applications or services. Additionally, this method is limited to certain types of databases supported by AWS, such as Amazon RDS for MySQL and PostgreSQL, and might not be available for all database engines. Lastly, in the scenario where Lambda functions need to share and securely access a connection string, other AWS services like the Systems Manager Parameter Store would be more appropriate to meet all the specified needs.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://aws.amazon.com/blogs/compute/sharing-secrets-with-aws-lambda-using-aws-systems-manager-parameter-store/\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://aws.amazon.com/blogs/compute/sharing-secrets-with-aws-lambda-using-aws-systems-manager-parameter-store/</span></a></p>",
    "choices": [
      {
        "id": 1538243,
        "value": "Store the database credentials as environment variables with KMS encryption which will be shared by the Lambda functions.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538244,
        "value": "Encrypt the database credentials and store them in an S3 bucket which the Lambda functions can fetch.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538245,
        "value": "Use AWS Systems Manager Parameter Store as a Secure String Parameter.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538246,
        "value": "Use IAM DB Authentication in RDS to allow encrypted connections from each Lambda function.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 10,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538245,
        "questionId": 383587,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383587,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Your team is developing a serverless application, which is composed of multiple Lambda functions which process data from an SQS queue and stores the results to an RDS database. To comply with the strict IT policy of the company, you were instructed to configure these functions to share the same connection string that should be properly secured and encrypted.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>What should you do to protect, encrypt, and share your database credentials in AWS?</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447403,
    "question": "S3 bucket",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>If you are getting an&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Access Denied</strong></b><span>&nbsp;error when trying to upload a large file to your S3 bucket with an upload request that includes an AWS KMS key, then you have to confirm that you have permission to perform&nbsp;kms:Decrypt&nbsp;actions on the AWS KMS key that you’re using to encrypt the object.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_12.jpg\"><span>To perform a multipart upload with encryption using an AWS KMS key, the requester must have permission to the&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">kms:Decrypt</strong></b><span>&nbsp;and&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">kms:GenerateDataKey*</strong></b><span>&nbsp;actions on the key. These permissions are required because Amazon S3 must decrypt and read data from the encrypted file parts before it completes the multipart upload.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence, the correct answers in this scenario are:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">– The AWS CLI S3 commands perform a multipart upload when the file is large.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">– The developer does not have the&nbsp;kms:Decrypt&nbsp;permission.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">The developer does not have the&nbsp;kms:Encrypt&nbsp;permission&nbsp;</strong></b><span>is incorrect. This permission is not necessary for you to have as it’s typically used for direct encryption requests with the KMS key and is only applicable for small data up to 4KB. Amazon S3 operates differently; it generates a data key from your KMS key to encrypt files. Behind the scenes, Amazon S3 actually&nbsp;generates a data key from your KMS key to encrypt files.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">The developer’s IAM permission has an attached inline policy that restricts him from uploading a file to S3 with a size of 100 GB or more&nbsp;</strong></b><span>is incorrect because inline policies are just policies that you create, manage, and embed directly into a single user, group, or role. This is unlikely to happen as there is no direct way to restrict a user from uploading a file with a specific size constraint.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">The maximum size that can be encrypted in KMS is only 100 GB</strong></b><span>&nbsp;is incorrect because there is no such limitation in KMS.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://aws.amazon.com/premiumsupport/knowledge-center/s3-large-file-encryption-kms-key/\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://aws.amazon.com/premiumsupport/knowledge-center/s3-large-file-encryption-kms-key/</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-managing-objects\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-managing-objects</span></a></p>",
    "choices": [
      {
        "id": 1538247,
        "value": "The developer's IAM permission has an attached inline policy that restricts him from uploading a file to S3 with a size of 100 GB or more.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538248,
        "value": "The maximum size that can be encrypted in KMS is only 100 GB. ",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538249,
        "value": "The developer does not have the kms:Decrypt permission.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538250,
        "value": "The AWS CLI S3 commands perform a multipart upload when the file is large.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538251,
        "value": "The developer does not have the kms:Encrypt permission.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 11,
    "type": "MULTIPLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538249,
        "questionId": 383588,
        "response": null,
        "answerFeedback": null
      },
      {
        "isCorrect": true,
        "choiceId": 1538250,
        "questionId": 383588,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383588,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A developer runs a shell script that uses the&nbsp;aws s3 cp&nbsp;CLI to upload a large file to an S3 bucket. The S3 bucket is configured with Server-side encryption with AWS Key Management Service (SSE-KMS). An&nbsp;Access Denied&nbsp;error always shows up whenever the developer uploads a file with a size of 100 GB or more. However, whenever he uploads a smaller file, the request succeeds.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following are possible reasons why this issue is happening? (Select TWO.)</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447404,
    "question": "Key management service",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">AWS CloudHSM</strong></b><span>&nbsp;provides hardware security modules in AWS Cloud. A hardware security module (HSM) is a computing device that processes cryptographic operations and provides secure storage for cryptographic keys.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_13.jpg\"><span>When you use an HSM from AWS CloudHSM, you can perform a variety of cryptographic tasks:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Generate, store, import, export, and manage cryptographic keys, including symmetric keys and asymmetric key pairs.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Use symmetric and asymmetric algorithms to encrypt and decrypt data.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Use cryptographic hash functions to compute message digests and hash-based message authentication codes (HMACs).</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Cryptographically sign data (including code signing) and verify signatures.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Generate cryptographically secure random data.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>You should consider using AWS CloudHSM instead of AWS KMS if you require:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Keys stored in dedicated, third-party validated hardware security modules under your exclusive control.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– FIPS 140-2 compliance.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Integration with applications using PKCS#11, Java JCE, or Microsoft CNG interfaces.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– High-performance in-VPC cryptographic acceleration (bulk crypto).</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence, the correct answer is to&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">import the encryption keys from your on-premises key management service to AWS CloudHSM</strong></b><span>.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Using AWS KMS to store and manage the encryption keys&nbsp;</strong></b><span>is incorrect. Although AWS KMS supports asymmetric encryption, it doesn’t provide dedicated, third-party validated hardware security modules which are under your exclusive control. You have to use CloudHSM instead.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Importing the encryption keys from your on-premises key management service to AWS Secrets Manager as KMS Keys&nbsp;</strong></b><span>is incorrect because you can’t store KMS keys to AWS Secrets Manager.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Developing a custom key management service using the AWS Encryption SDK&nbsp;</strong></b><span>is incorrect because this entails a lot of effort to implement. Moreover,&nbsp;the AWS Encryption SDK only encrypts your data using a symmetric key algorithm which doesn’t comply with the requirements provided in the scenario.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/cloudhsm/latest/userguide/manage-keys.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/cloudhsm/latest/userguide/manage-keys.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://aws.amazon.com/cloudhsm/faqs/\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://aws.amazon.com/cloudhsm/faqs/</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "choices": [
      {
        "id": 1538252,
        "value": "Import the encryption keys from your on-premises key management service to AWS CloudHSM.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538253,
        "value": "Import the encryption keys from your on-premises key management service to AWS Secrets Manager as KMS Keys.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538254,
        "value": "Use AWS KMS to store and manage the encryption keys.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538255,
        "value": "Develop a custom key management service using the AWS Encryption SDK.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 12,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538252,
        "questionId": 383589,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383589,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A cryptocurrency exchange portal has a key management service hosted in their on-premises data center, which stores encryption keys and uses an RSA asymmetric encryption algorithm. The company has recently implemented a hybrid cloud architecture in AWS and you were assigned to migrate the exchange portal to their cloud infrastructure. For security compliance, the keys should be stored in dedicated, third-party validated hardware security modules under your exclusive control.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following is the BEST solution that you should implement to meet the above requirement?</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447405,
    "question": "KMS key.",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>When you encrypt your data, it is protected, but you have to protect your encryption key. One strategy is to encrypt it.&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Envelope encryption</strong></b><span>&nbsp;is the practice of encrypting plaintext data with a data key and then encrypting the data key under another key.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>You can even encrypt the data encryption key under another encryption key, and encrypt that encryption key under another encryption key. But, eventually, one key must remain in plaintext so you can decrypt the keys and your data. This top-level plaintext key encryption key is known as the root</span><i><em class=\"Editor__editor-text-italic___C9n8O\">&nbsp;key</em></i><span>.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_14.jpg\"><b><strong class=\"Editor__editor-text-bold___25KrR\">AWS KMS</strong></b><span>&nbsp;helps you to protect your encryption keys by storing and managing them securely. Root keys stored in AWS KMS, known as AWS KMS keys, never leave the AWS KMS FIPS validated hardware security modules unencrypted. To use an AWS KMS key, you must call AWS KMS.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>It is recommended that you use the following pattern to encrypt data locally in your application:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>1. Use the&nbsp;GenerateDataKey&nbsp;operation to get a data encryption key.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>2. Use the plaintext data key (returned in the&nbsp;Plaintext&nbsp;field of the response) to encrypt data locally, then erase the plaintext data key from memory.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>3. Store the encrypted data key (returned in the&nbsp;CiphertextBlob&nbsp;field of the response) alongside the locally encrypted data.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>To&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">decrypt</strong></b><span>&nbsp;data locally:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">1. Use the&nbsp;</strong></b><a href=\"https://docs.aws.amazon.com/kms/latest/APIReference/API_Decrypt.html\" class=\"Editor__editor-link___3vl2C\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Decrypt</strong></b></a><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;operation to decrypt the encrypted data key. The operation returns a plaintext copy of the data key.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">2. Use the plaintext data key to decrypt data locally, then erase the plaintext data key from memory.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Use the Decrypt operation to decrypt the plaintext data key&nbsp;</strong></b><span>is incorrect because there is no need to decrypt a&nbsp;plaintext, or ‘unencrypted’, data key. The&nbsp;correct way is to use the Decrypt operation to decrypt the encrypted data key.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Use the plaintext data key to decrypt data locally, then erase the encrypted data key from memory</strong></b><span>&nbsp;is incorrect. Although this is a valid option for the encryption process, you still must erase the plaintext data key instead of the encrypted one. Take note that you are asked to choose valid and secure steps as per the scenario.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Use the encrypted data key to decrypt data locally, then erase the encrypted data key from memory</strong></b><i><b><strong class=\"Editor__editor-text-bold___25KrR Editor__editor-text-italic___C9n8O\">&nbsp;</strong></b></i><span>is incorrect because you cannot decrypt data using an encrypted data key. You have to decrypt the encrypted data key first and use the plaintext copy of the data key to decrypt the files.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/kms/latest/APIReference/API_GenerateDataKey.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/kms/latest/APIReference/API_GenerateDataKey.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#enveloping\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#enveloping</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "choices": [
      {
        "id": 1538256,
        "value": "Use the Decrypt operation to decrypt the plaintext data key.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538257,
        "value": "Use the plaintext data key to decrypt data locally, then erase the encrypted data key from memory.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538258,
        "value": "Use the encrypted data key to decrypt data locally, then erase the encrypted data key from memory.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538259,
        "value": "Use the plaintext data key to decrypt data locally, then erase the plaintext data key from memory.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538260,
        "value": "Use the Decrypt operation to decrypt the encrypted data key.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 13,
    "type": "MULTIPLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538259,
        "questionId": 383590,
        "response": null,
        "answerFeedback": null
      },
      {
        "isCorrect": true,
        "choiceId": 1538260,
        "questionId": 383590,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383590,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A developer is working on an application that will process files encrypted with a data key generated from a KMS key. The application needs to decrypt the files locally before it can proceed with the processing of the files.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following are valid and secure steps in decrypting data? (Select TWO.)</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447406,
    "question": "API Gateway Lambda Authorizer",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A Lambda authorizer is an API Gateway feature that uses a Lambda function to control access to your API. When a client makes a request to one of your API’s methods, API Gateway calls your Lambda authorizer, which takes the caller’s identity as input and returns an IAM policy as output.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>There are two types of Lambda authorizers:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;– A&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">token-based</strong></b><span>&nbsp;Lambda authorizer (also called a TOKEN authorizer) receives the caller’s identity in a bearer token, such as a JSON Web Token (JWT) or an OAuth token.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;– A&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">request parameter-based</strong></b><span>&nbsp;Lambda authorizer (also called a REQUEST authorizer) receives the caller’s identity in a combination of headers, query string parameters, stageVariables, and $context variables.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_15.jpg\"><span>It is possible to use an AWS Lambda function from an AWS account that is different from the one in which you created your Lambda authorizer function by using a Cross-Account Lambda Authorizer.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Therefore, the correct answer in this scenario is to use a&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">token-based authorization</strong></b><span>&nbsp;since this is useful if you want to implement a custom authorization scheme that uses a bearer token authentication strategy such as OAuth or SAML.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Requesting Parameter-based Lambda Authorization&nbsp;</strong></b><span>is incorrect because this does not use tokens to identify a caller but through a combination of headers, query string parameters, stageVariables, and $context variables.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">AWS STS-based authentication&nbsp;</strong></b><span>is incorrect because this is not a valid type of&nbsp;API Gateway Lambda Authorizer.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Cross-Account Lambda Authorize</strong></b><i><b><strong class=\"Editor__editor-text-bold___25KrR Editor__editor-text-italic___C9n8O\">r</strong></b></i><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;</strong></b><span>is incorrect because this just enables you to use an AWS Lambda function from a different AWS account as your API authorizer function. Moreover, this is not a valid&nbsp;Lambda authorizer type.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-lambda-authorizer-input.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-lambda-authorizer-input.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-lambda-authorizer-cross-account-lambda-authorizer.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-lambda-authorizer-cross-account-lambda-authorizer.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "choices": [
      {
        "id": 1538261,
        "value": "AWS STS-based Authentication",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538262,
        "value": "Cross-Account Lambda Authorizer",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538263,
        "value": "Token-based Authorization",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538264,
        "value": "Request Parameter-based Authorization",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 14,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538263,
        "questionId": 383591,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383591,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A developer is using API Gateway Lambda Authorizer to provide authentication for every API request and control access to your API. The requirement is to implement an authentication strategy which is similar to OAuth or SAML.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following is the MOST suitable method that the developer should use in this scenario?</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447407,
    "question": "RDS database",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">AWS Secrets Manager</strong></b><span>&nbsp;is an AWS service that makes it easier for you to manage secrets.&nbsp;</span><i><em class=\"Editor__editor-text-italic___C9n8O\">Secrets</em></i><span>&nbsp;can be database credentials, passwords, third-party API keys, and even arbitrary text. You can store and control access to these secrets centrally by using the Secrets Manager console, the Secrets Manager command line interface (CLI), or the Secrets Manager API and SDKs.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>In the past, when you created a custom application that retrieves information from a database, you typically had to embed the credentials (the secret) for accessing the database directly in the application. When it came time to rotate the credentials, you had to do much more than just create new credentials. You had to invest time to update the application to use the new credentials. Then you had to distribute the updated application. If you had multiple applications that shared credentials and you missed updating one of them, the application would break. Because of this risk, many customers have chosen not to regularly rotate their credentials, which effectively substitutes one risk for another.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_16.jpg\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Secrets Manager</strong></b><span>&nbsp;enables you to replace hardcoded credentials in your code (including passwords), with an API call to Secrets Manager to retrieve the secret programmatically. This helps ensure that the secret can’t be compromised by someone examining your code, because the secret simply isn’t there. Also, you can configure Secrets Manager to automatically rotate the secret for you according to a schedule that you specify. This enables you to replace long-term secrets with short-term ones, which helps to significantly reduce the risk of compromise.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence,&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">using AWS Secrets Manager to store and encrypt the credentials and enabling automatic rotation</strong></b><span>&nbsp;is the most appropriate solution for this scenario.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Storing the credentials to Systems Manager Parameter Store with a&nbsp;SecureString&nbsp;data type&nbsp;</strong></b><span>is incorrect because, by default,&nbsp;Systems Manager Parameter Store doesn’t rotate its parameters which is one of the requirements in the above scenario.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Storing the credentials to AWS ACM&nbsp;</strong></b><span>is incorrect because it is just a managed private CA service that helps you easily and securely manage the lifecycle of your private certificates to allow SSL communication to your application. This is not a suitable service to store database or any other confidential credentials.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Storing the credentials in AWS KMS</strong></b><span>&nbsp;is incorrect because this only makes it easy for you to create and manage encryption keys and control the use of encryption across a wide range of AWS services. This is primarily used for encryption and not for hosting your credentials.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://aws.amazon.com/blogs/compute/sharing-secrets-with-aws-lambda-using-aws-systems-manager-parameter-store/\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://aws.amazon.com/blogs/compute/sharing-secrets-with-aws-lambda-using-aws-systems-manager-parameter-store/</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "choices": [
      {
        "id": 1538265,
        "value": "Store the credentials to AWS ACM.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538266,
        "value": "Store the credentials to Systems Manager Parameter Store with a SecureString data type.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538267,
        "value": "Use AWS Secrets Manager to store and encrypt the credentials and enable automatic rotation.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538268,
        "value": "Store the credentials in AWS KMS",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 15,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": false,
        "choiceId": 1538266,
        "questionId": 383592,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383592,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A company has a suite of web applications that is heavily using RDS database in Multi-AZ Deployments configuration with several Read Replicas. For improved security, you were instructed to ensure that all of their database credentials, API keys, and other secrets are encrypted and rotated on a regular basis. You should also configure your applications to use the latest version of the encrypted credentials when connecting to the RDS database.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following is the MOST appropriate solution to secure the credentials?</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447408,
    "question": "EC2",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Server-side encryption</strong></b><span>&nbsp;is about protecting data at rest. AWS Key Management Service (</span><b><strong class=\"Editor__editor-text-bold___25KrR\">AWS KMS</strong></b><span>) is a service that combines secure, highly available hardware and software to provide a key management system scaled for the cloud. AWS KMS uses KMS keys to encrypt your Amazon S3 objects. You use AWS KMS via the&nbsp;AWS Management Console&nbsp;or&nbsp;AWS KMS APIs&nbsp;to centrally create encryption keys, define the policies that control how keys can be used, and audit key usage to prove they are being used correctly. You can use these keys to protect your data in Amazon S3 buckets.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The first time you add an SSE-KMS–encrypted object to a bucket in a region, a default KMS key is created for you automatically. This key is used for SSE-KMS encryption unless you select a KMS key that you created separately using AWS Key Management Service. Creating your own KMS key gives you more flexibility, including the ability to create, rotate, disable, and define access controls, and to audit the encryption keys used to protect your data.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;Amazon S3 supports bucket policies that you can use if you require server-side encryption for all objects that are stored in your bucket. For example, you can set a bucket policy that denies permission to upload an object (s3:PutObject) to everyone if the request does not include the&nbsp;x-amz-server-side-encryption&nbsp;header requesting server-side encryption with SSE-KMS.</span><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_17.jpg\"></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>When you upload an object, you can specify the KMS key using the&nbsp;x-amz-server-side-encryption-aws-kms-key-id&nbsp;header which you can use to require a specific KMS key for object encryption. If the header is not present in the request, Amazon S3 assumes the default KMS key. Regardless, the KMS key ID that Amazon S3 uses for object encryption must match the KMS key ID in the policy, otherwise Amazon S3 denies the request.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Therefore, the correct answer is:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Add a bucket policy which denies any&nbsp;s3:PutObject&nbsp;action unless the request includes the&nbsp;x-amz-server-side-encryption-aws-kms-key-id&nbsp;header.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Add a bucket policy which denies any&nbsp;s3:PutObject&nbsp;action unless the request includes the&nbsp;x-amz-server-side-encryption&nbsp;header</strong></b><span>&nbsp;is incorrect.&nbsp;While this policy ensures that objects are encrypted, it does not enforce the use of AWS KMS keys. The&nbsp;x-amz-server-side-encryption&nbsp;header can typically specify different encryption methods, including SSE-S3 (Amazon S3 managed keys) or SSE-KMS (AWS KMS keys). Since the requirement is to use AWS KMS keys specifically, this option is not sufficient.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Add a bucket policy which denies any&nbsp;s3:PostObject&nbsp;action unless the request includes the&nbsp;x-amz-server-side-encryption&nbsp;header</strong></b><span>&nbsp;is incorrect because the correct action for uploading objects is&nbsp;s3:PutObject,&nbsp;not the&nbsp;s3:PostObject&nbsp;action. Additionally,&nbsp;it does not specifically enforce the use of AWS KMS keys.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Adding a bucket policy which denies any&nbsp;s3:PostObject&nbsp;action unless the request includes the&nbsp;x-amz-server-side-encryption-aws-kms-key-id&nbsp;header</strong></b><span>&nbsp;is incorrect&nbsp;because it uses the&nbsp;s3:PostObject&nbsp;action instead of the correct&nbsp;s3:PutObject&nbsp;action. Even though it primarily uses the&nbsp; AWS KMS keys, the incorrect action makes this policy ineffective for ensuring encryption during object uploads.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/specifying-kms-encryption.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonS3/latest/userguide/specifying-kms-encryption.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "choices": [
      {
        "id": 1538269,
        "value": "Add a bucket policy which denies any s3:PostObject action unless the request includes the x-amz-server-side-encryption header.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538270,
        "value": "Add a bucket policy which denies any s3:PostObject action unless the request includes the x-amz-server-side-encryption-aws-kms-key-id header.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538271,
        "value": "Add a bucket policy which denies any s3:PutObject action unless the request includes the x-amz-server-side-encryption-aws-kms-key-id header.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538272,
        "value": "Add a bucket policy which denies any s3:PutObject action unless the request includes the x-amz-server-side-encryption header.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 16,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538271,
        "questionId": 383593,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383593,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>An application hosted in an Auto Scaling group of On-Demand EC2 instances is used to process data polled from an SQS queue, and the generated output is stored in an S3 bucket. To enhance security, you were tasked to ensure that all objects in the S3 bucket are encrypted at rest using server-side encryption with AWS KMS keys.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following is required to properly implement this requirement?</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447409,
    "question": "ECS",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>By default, IAM users don’t have permission to create or modify Amazon ECS resources or perform tasks using the Amazon ECS API. This means that they also can’t do so using the Amazon ECS console or the AWS CLI. To allow IAM users to create or modify resources and perform tasks, you must create IAM policies. Policies grant IAM users permission to use specific resources and API actions. Then, attach those policies to the IAM users or groups that require those permissions.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;When you attach a policy to a user or group of users, it allows or denies the users permission to perform the specified tasks on the specified resources.&nbsp;Likewise, Amazon ECS container instances make calls to the Amazon ECS and Amazon EC2 APIs on your behalf, so they need to authenticate with your credentials. This authentication is accomplished by creating an IAM role for your container instances and associating that role with your container instances when you launch them.</span><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_18.jpg\"></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>If you use an Elastic Load Balancing load balancer with your Amazon ECS services, calls to the Amazon EC2 and Elastic Load Balancing APIs are made on your behalf to register and deregister container instances with your load balancers.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence, the most suitable solution in this scenario is:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Create 4 different IAM Roles with the required permissions and attach them to each of the 4 ECS tasks</strong></b><span>.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Creating an IAM Group with all the required permissions and attaching them to each of the 4 ECS tasks&nbsp;</strong></b><span>is incorrect because you cannot directly attach an IAM Group to an ECS Task. Attaching an IAM Role is a more suitable solution in this scenario and not an IAM Group.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Creating 4 different Container Instance IAM Roles with the required permissions and attaching them to each of the 4 ECS tasks</strong></b><i><b><strong class=\"Editor__editor-text-bold___25KrR Editor__editor-text-italic___C9n8O\">&nbsp;</strong></b></i><span>is incorrect because a Container Instance IAM Role only applies if you are using the EC2 launch type. Take note that the scenario says that the application will be using a Fargate launch type.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Creating 4 different Service-Linked Roles with the required permissions and attaching them to each of the 4 ECS tasks</strong></b><i><b><strong class=\"Editor__editor-text-bold___25KrR Editor__editor-text-italic___C9n8O\">&nbsp;</strong></b></i><span>is incorrect because a service-linked role is a unique type of IAM role that is linked directly to Amazon ECS itself, not on the ECS task. Service-linked roles are predefined by Amazon ECS and include all the permissions that the service requires to call other AWS services on your behalf.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_IAM_role.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_IAM_role.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html#create_task_iam_policy_and_role\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html#create_task_iam_policy_and_role</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "choices": [
      {
        "id": 1538273,
        "value": "Create 4 different Service-Linked Roles with the required permissions and attach them to each of the 4 ECS tasks.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538274,
        "value": "Create 4 different Container Instance IAM Roles with the required permissions and attach them to each of the 4 ECS tasks.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538275,
        "value": "Create an IAM Group with all the required permissions and attach them to each of the 4 ECS tasks.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538276,
        "value": "Create 4 different IAM Roles with the required permissions and attach them to each of the 4 ECS tasks.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 17,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538276,
        "questionId": 383594,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383594,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A developer is building an application that will be hosted in ECS and must be configured to run tasks and services using the Fargate launch type. The application will have four different tasks, each of which will access different AWS resources than the others.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following is the MOST efficient solution that can provide your application in ECS access to the required AWS resources?</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447410,
    "question": " S3 bucket",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Server-side encryption is about protecting data at rest. Using server-side encryption with customer-provided encryption keys (SSE-C) allows you to set your own encryption keys. With the encryption key you provide as part of your request, Amazon S3 manages both the encryption, as it writes to disks, and decryption, when you access your objects. Therefore, you don’t need to maintain any code to perform data encryption and decryption. The only thing you do is manage the encryption keys you provide.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_19.jpg\"><span>When you upload an object, Amazon S3 uses the encryption key you provide to apply AES-256 encryption to your data and removes the encryption key from memory. It is important to note that&nbsp;Amazon S3 does not store the encryption key you provide. Instead, it is stored in a randomly salted HMAC value of the encryption key in order to validate future requests. The salted HMAC value cannot be used to derive the value of the encryption key or to decrypt the contents of the encrypted object. That means, if you lose the encryption key, you lose the object.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>When you retrieve an object, you must provide the same encryption key as part of your request. Amazon S3 first verifies that the encryption key you provided matches, and then decrypts the object before returning the object data to you.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>When using server-side encryption with customer-provided encryption keys (SSE-C), you&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">must</strong></b><span>&nbsp;provide encryption key information using the following request headers:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">x-amz-server-side-encryption-customer-algorithm</strong></b><span>&nbsp;– This header specifies the encryption algorithm. The header value must be “AES256”.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">x-amz-server-side-encryption-customer-key&nbsp;</strong></b><span>– This header provides the 256-bit, base64-encoded encryption key for Amazon S3 to use to encrypt or decrypt your data.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">x-amz-server-side-encryption-customer-key-MD5&nbsp;</strong></b><span>– This header provides the base64-encoded 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence, the correct answer is:</span><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;x-amz-server-side</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\" style=\"font-family: Arial, sans-serif;\">​</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\">-encryption</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\" style=\"font-family: Arial, sans-serif;\">​</strong></b><b><strong class=\"Editor__editor-text-bold___25KrR\">-customer-algorithm,&nbsp;x-amz-server-side-encryption-customer-key&nbsp;and&nbsp;x-amz-server-side-encryption-customer-key-MD5&nbsp;headers.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Including the&nbsp;x-amz-server-side-encryption&nbsp;and&nbsp;x-amz-server-side-encryption-aws-kms-key-id&nbsp;headers in the upload request</strong></b><span>&nbsp;is incorrect because these headers are primarily used in Server-Side Encryption with AWS KMS Keys (SSE-KMS) and not for Server-Side Encryption with Customer-Provided Keys (SSE-C).</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Including the&nbsp;x-amz-server-side-encryption,&nbsp;x-amz-server-side-encryption-customer-key&nbsp;and&nbsp;x-amz-server-side-encryption-customer-key-MD5&nbsp;headers</strong></b><span>&nbsp;is incorrect because the&nbsp;x-amz-server-side-encryption&nbsp;header is not used in SSE-C encryption. This should be replaced with the&nbsp;x-amz-server-side</span><span style=\"font-family: Arial, sans-serif;\">​</span><span>-encryption</span><span style=\"font-family: Arial, sans-serif;\">​</span><span>-customer-algorithm&nbsp;header.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Including just the&nbsp;x-amz-server-side-encryption-customer-key&nbsp;header only</strong></b><span>&nbsp;is incorrect because you have to include the&nbsp;x-amz-server-side</span><span style=\"font-family: Arial, sans-serif;\">​</span><span>-encryption</span><span style=\"font-family: Arial, sans-serif;\">​</span><span>-customer-algorithm&nbsp;and&nbsp;x-amz-server-side-encryption-customer-key-MD5&nbsp;headers as well to upload the objects to the S3 bucket with SSE-C encryption.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html#RESTObjectPUT-responses-examples\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html#RESTObjectPUT-responses-examples</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://aws.amazon.com/blogs/security/how-to-prevent-uploads-of-unencrypted-objects-to-amazon-s3/\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://aws.amazon.com/blogs/security/how-to-prevent-uploads-of-unencrypted-objects-to-amazon-s3/</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "choices": [
      {
        "id": 1538277,
        "value": "x-amz-server-side-encryption-customer-algorithm, x-amz-server-side-encryption-customer-key and x-amz-server-side-encryption-customer-key-MD5 headers",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538278,
        "value": "x-amz-server-side-encryption and x-amz-server-side-encryption-aws-kms-key-id headers",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538279,
        "value": "x-amz-server-side-encryption, x-amz-server-side-encryption-customer-key and x-amz-server-side-encryption-customer-key-MD5 headers",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538280,
        "value": "x-amz-server-side-encryption-customer-key header only",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 18,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538277,
        "questionId": 383595,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383595,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Your manager assigned you a task of implementing server-side encryption with customer-provided encryption keys (SSE-C) to your S3 bucket, which will allow you to set your own encryption keys. Amazon S3 will manage both the encryption and decryption process using your key when you access your objects, which will remove the burden of maintaining any code to perform data encryption and decryption.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>To properly upload data to this bucket, which of the following headers must be included in your request?</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447411,
    "question": "AWS accounts",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>You can grant your IAM users permission to switch to roles within your AWS account or to roles defined in other AWS accounts that you own.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Imagine that you have Amazon EC2 instances that are critical to your organization. Instead of directly granting your users permission to terminate the instances, you can create a role with those privileges. Then allow administrators to switch to the role when they need to terminate an instance. Doing this adds the following layers of protection to the instances:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;– You must explicitly grant your users permission to assume the role.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;– Your users must actively switch to the role using the AWS Management Console or assume the role using the AWS CLI or AWS API.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;– You can add multi-factor authentication (MFA) protection to the role so that only users who sign in with an MFA device can assume the role.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_20.jpg\"><span>You can use a role to delegate access to resources that are in different AWS accounts that you own (Production and Testing). You can share resources in one account with users in a different account by setting up cross-account access. In this way, you don’t need to create individual IAM users in each account and the users don’t have to sign out of one account and sign into another in order to access resources that are in different AWS accounts.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence, the most efficient answer in this scenario is to:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Grant the developer cross-account access to the resources of Accounts B and C.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Create separate identities and passwords for the developer on both the Test and Production accounts&nbsp;</strong></b><span>is incorrect because although this is a valid option, it is not an efficient one since the developer will have to log in to each individual AWS account in order to access the resources. A better way to do this is to grant cross-account access.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Enable AWS multi-factor authentication (MFA) to the IAM User of the developer&nbsp;</strong></b><span>is incorrect because although this will improve the security, it still doesn’t solve the access problem of the developer. This can be used in conjunction with cross-account access, but using this alone will not suffice.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Set up AWS Organizations and attach a Service Control Policy to the developer to access the other accounts&nbsp;</strong></b><span>is incorrect because although it will make the multiple AWS accounts of the company more manageable, it doesn’t address the access requirement of the developer. Take note that SCPs are necessary, but not sufficient, for granting access for the accounts in your organization.&nbsp;You still need to attach IAM policies to users and roles in your organization’s accounts to actually grant permissions to them.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_common-scenarios_aws-accounts.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_common-scenarios_aws-accounts.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "choices": [
      {
        "id": 1538281,
        "value": "Grant the developer cross-account access to the resources of Accounts B and C.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538282,
        "value": "Create separate identities and passwords for the developer on both the Test and Production accounts.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538283,
        "value": "Set up AWS Organizations and attach a Service Control Policy to the developer to access the other accounts.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538284,
        "value": "Enable AWS multi-factor authentication (MFA) to the IAM User of the developer.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 19,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538281,
        "questionId": 383596,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383596,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A company has different AWS accounts, namely Account A, Account B, and Account C, which are used for their Development, Test, and Production environments respectively. A developer needs access to perform an audit whenever a new version of the application has been deployed to the Test (Account B) and production (Account C) environments.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>What is the MOST efficient way to provide the developer access to execute the specified task?</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447412,
    "question": "SMM",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Parameter policies help you manage a growing set of parameters by allowing you to assign specific criteria to a parameter, such as an expiration date or&nbsp;time to live. Parameter policies are especially helpful in forcing you to update or delete passwords and configuration data stored in Parameter Store, a capability of AWS Systems Manager. Take note that parameter policies are only available for parameters in the&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Advanced tier</strong></b><span>.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Parameter Store offers the following types of policies:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Expiration&nbsp;–&nbsp;</strong></b><span>deletes the parameter at a specific date</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">ExpirationNotification&nbsp;–&nbsp;</strong></b><span>sends an event to Amazon EventBridge (Amazon CloudWatch Events)</span><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;</strong></b><span>when the specified&nbsp;expiration time is reached.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">NoChangeNotification&nbsp;–</strong></b><span>The&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">NoChangeNotification&nbsp;</strong></b><span>policy sends a notification based on the&nbsp;LastModifiedTime attribute of the parameter. If you change or edit a parameter, the system resets the notification time period based on the new value of LastModifiedTime. In the scenario’s case, we want to be notified if specific parameters were not rotated in the last 90 days.&nbsp;sends an event to Amazon EventBridge (Amazon CloudWatch Events) when&nbsp;a parameter has not been modified for a specified period of time.</span><br><br><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_21.jpg\"></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>In the scenario, the goal is to be notified if specific sensitive parameters have not been rotated within the past 90 days. Configuring the&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">NoChangeNotification</strong></b><span>&nbsp;policy with a value of 90 days allows SSM to emit a notification to EventBridge whenever the LastModifiedTime of the sensitive parameters exceeds the specified time frame.&nbsp;However, setting the notification policy alone is not enough. You must configure Amazon EventBridge (Amazon CloudWatch Events) to capture the emitted events and route them to an Amazon SNS topic.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence, the correct answer is:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Convert the sensitive parameters from Standard tier into Advanced tier. Set a&nbsp;NoChangeNotification&nbsp;policy with a value of 90 days. Use Amazon EventBridge (Amazon CloudWatch Events) to send a notification via Amazon SNS.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Configure a&nbsp;NoChangeNotification&nbsp;policy with a value of 90 days. Use Amazon EventBridge (Amazon CloudWatch Events) to send a notification via Amazon SNS&nbsp;</strong></b><span>is incorrect because notification policies are not supported in the Standard tier. You must convert the parameters first into the Advanced tier.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Convert the sensitive parameters from Standard tier into Advanced tier. Set a&nbsp;ExpirationNotification&nbsp;policy with a value of 90 days. Use Amazon EventBridge (Amazon CloudWatch Events) to send a notification via Amazon SNS&nbsp;</strong></b><span>is incorrect because the&nbsp;ExpirationNotification&nbsp;policy is for notifying when a parameter is about to expire, not when it hasn’t been rotated. In this case, the&nbsp;NoChangeNotification&nbsp;policy should be used instead.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Set up an Amazon EventBridge (Amazon CloudWatch Events) event pattern that captures SSM Parameter-related events. Use Amazon SNS to send notifications&nbsp;</strong></b><span>is incorrect. A notification policy must be enabled as well, otherwise, Amazon EventBridge (Amazon CloudWatch Events) won’t be able to receive any notifications.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://aws.amazon.com/about-aws/whats-new/2019/04/aws_systems_manager_parameter_store_introduces_advanced_parameters/\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://aws.amazon.com/about-aws/whats-new/2019/04/aws_systems_manager_parameter_store_introduces_advanced_parameters/</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;</strong></b></p>",
    "choices": [
      {
        "id": 1538285,
        "value": "Convert the sensitive parameters from Standard tier into Advanced tier. Set a NoChangeNotification policy with a value of 90 days. Use Amazon EventBridge (Amazon CloudWatch Events) to send a notification via Amazon SNS.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538286,
        "value": "Configure a NoChangeNotification policy with a value of 90 days. Use Amazon EventBridge (Amazon CloudWatch Events) to send a notification via Amazon SNS.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538287,
        "value": "Convert the sensitive parameters from Standard tier into Advanced tier. Set a ExpirationNotification policy with a value of 90 days. Use Amazon EventBridge (Amazon CloudWatch Events) to send a notification via Amazon SNS.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538288,
        "value": "Set up an Amazon EventBridge (Amazon CloudWatch Events) event pattern that captures SSM Parameter-related events. Use Amazon SNS to send notifications.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 20,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538285,
        "questionId": 383597,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383597,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A company uses AWS Systems Manager (SSM) Parameter Store to manage configuration details for multiple applications. The parameters are currently stored in the Standard tier. The company wants its operations team to be notified if there are sensitive parameters that haven’t been rotated within 90 days.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which must be done to meet the requirement?</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447413,
    "question": "EC2",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>To enable HTTPS connections to your website or application in AWS, you need an&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">SSL/TLS&nbsp;</strong></b><i><b><strong class=\"Editor__editor-text-bold___25KrR Editor__editor-text-italic___C9n8O\">server certificate</strong></b></i><span>. For certificates in a Region supported by AWS Certificate Manager (ACM), it is recommended that you use ACM to provision, manage, and deploy your server certificates. In unsupported Regions, you must use IAM as a certificate manager.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_22.jpg\"><span>ACM is the preferred tool to provision, manage, and deploy your server certificates. With ACM you can request a certificate or deploy an existing ACM or external certificate to AWS resources. Certificates provided by ACM are free and automatically renew. In a&nbsp;supported Region, you can use ACM to manage server certificates from the console or programmatically</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Use IAM as a certificate manager only when you must support HTTPS connections in a Region that is not&nbsp;supported by ACM. IAM securely encrypts your private keys and stores the encrypted version in IAM SSL certificate storage. IAM supports deploying server certificates in all Regions, but you must obtain your certificate from an external provider for use with AWS. You cannot upload an ACM certificate to IAM. Additionally, you cannot manage your certificates from the IAM Console.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>If you got your certificate from a third-party CA, import the certificate into ACM or upload it to the IAM certificate store. Hence, the correct answers are&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">AWS Certificate Manager (ACM)&nbsp;</strong></b><span>and&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">IAM certificate store.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">A private S3 bucket with versioning enabled</strong></b><span>&nbsp;is incorrect as S3 is not a suitable service to store the SSL certificate. You have to import it to either AWS Certificate Manager (ACM) or IAM certificate store.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Amazon Cognito</strong></b><span>&nbsp;is incorrect because&nbsp;this is just a user identity and data synchronization service that helps you securely manage and synchronize app data for your users across their mobile devices. This service can’t be used to store or import your SSL certificates.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">CloudFront</strong></b><span>&nbsp;is incorrect. Although you can upload certificates to CloudFront, it doesn’t mean that you can import third-party SSL certificates on it. If you got your certificate from a third-party CA then you have to import the certificate into ACM or upload it to the IAM certificate store first. You would also not be able to export the certificate that you have loaded in CloudFront nor assign them to your EC2 or ELB instances as it would be tied to a single CloudFront distribution.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://aws.amazon.com/certificate-manager/\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://aws.amazon.com/certificate-manager/</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cnames-and-https-procedures.html#cnames-and-https-uploading-certificates\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cnames-and-https-procedures.html#cnames-and-https-uploading-certificates</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;</strong></b></p>",
    "choices": [
      {
        "id": 1538289,
        "value": "A private S3 bucket with versioning enabled",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538290,
        "value": "Amazon Cognito",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538291,
        "value": "AWS Certificate Manager",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538292,
        "value": "CloudFront",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538293,
        "value": "IAM certificate store",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 21,
    "type": "MULTIPLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538291,
        "questionId": 383598,
        "response": null,
        "answerFeedback": null
      },
      {
        "isCorrect": true,
        "choiceId": 1538293,
        "questionId": 383598,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383598,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A company has a static website running in an Auto Scaling group of EC2 instances which they want to convert as a dynamic e-commerce web portal. One of the requirements is to use HTTPS to improve the security of their portal and also improve their search ranking as a reputable and secure site. A developer recently requested an SSL/TLS certificate from a third-party certificate authority (CA) which is ready to be imported to AWS.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following services can the developer use to safely import the SSL/TLS certificate? (Select TWO.)</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447414,
    "question": "Lambda functions",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">AWS Systems Manager Parameter Store</strong></b><span>&nbsp;provides secure, hierarchical storage for configuration data management and secrets management. You can store data such as passwords, database strings, and license codes as parameter values. You can store values as plain text or encrypted data. You can then reference values by using the unique name that you specified when you created the parameter.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;Parameter Store offers the following benefits and features:</span><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_23.jpg\"></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Use a secure, scalable, hosted secrets management service (No servers to manage).</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Improve your security posture by separating your data from your code.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Store configuration data and secure strings in hierarchies and track versions.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Control and audit access at granular levels.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Configure change notifications and trigger automated actions.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Tag parameters individually, and then secure access from different levels, including operational, parameter, Amazon EC2 tag, or path levels.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Reference AWS Secrets Manager secrets by using Parameter Store parameters.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence,&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">creating a Secure String Parameter using the AWS Systems Manager Parameter Store</strong></b><span>&nbsp;is the correct solution for this scenario.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Use AWS Lambda environment variables encrypted with KMS which will be shared by the Lambda functions</strong></b><span>&nbsp;is incorrect. Even though the credentials will be encrypted, these environment variables will only be used by an individual Lambda function, and cannot be shared.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Create an IAM Execution Role that has access to RDS and attach it to the Lambda functions</strong></b><span>&nbsp;is incorrect because this solution will not encrypt the database credentials for RDS.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:</span><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;Use AWS Lambda environment variables encrypted with CloudHSM</strong></b><span>&nbsp;is incorrect because Lambda primarily uses KMS for encryption and not CloudHSM.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://aws.amazon.com/blogs/compute/sharing-secrets-with-aws-lambda-using-aws-systems-manager-parameter-store/\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://aws.amazon.com/blogs/compute/sharing-secrets-with-aws-lambda-using-aws-systems-manager-parameter-store/</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "choices": [
      {
        "id": 1538294,
        "value": "Use AWS Lambda environment variables encrypted with KMS which will be shared by the Lambda functions.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538295,
        "value": "Use AWS Lambda environment variables encrypted with CloudHSM.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538296,
        "value": "Create an IAM Execution Role that has access to RDS and attach it to the Lambda functions.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538297,
        "value": "Create a Secure String Parameter using the AWS Systems Manager Parameter Store.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 22,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538297,
        "questionId": 383599,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383599,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A serverless application is composed of several Lambda functions which reads data from RDS. These functions must share the same connection string that should be encrypted to improve data security.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following is the MOST secure way to meet the above requirement?</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447415,
    "question": "ISMS",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">AWS Secrets Manager</strong></b><span>&nbsp;is an AWS service that makes it easier for you to manage secrets.&nbsp;</span><i><em class=\"Editor__editor-text-italic___C9n8O\">Secrets</em></i><span>&nbsp;can be database credentials, passwords, third-party API keys, and even arbitrary text. You can store and control access to these secrets centrally by using the Secrets Manager console, the Secrets Manager command line interface (CLI), or the Secrets Manager API and SDKs.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>In the past, when you created a custom application that retrieves information from a database, you typically had to embed the credentials (the secret) for accessing the database directly in the application. When it came time to rotate the credentials, you had to do much more than just create new credentials. You had to invest time to update the application to use the new credentials. Then you had to distribute the updated application. If you had multiple applications that shared credentials and you missed updating one of them, the application would break. Because of this risk, many customers have chosen not to regularly rotate their credentials, which effectively substitutes one risk for another.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;Secrets Manager enables you to replace hardcoded credentials in your code (including passwords), with an API call to Secrets Manager to retrieve the secret programmatically. This helps ensure that the secret can’t be compromised by someone examining your code, because the secret simply isn’t there. Also, you can configure Secrets Manager to automatically rotate the secret for you according to a schedule that you specify. This enables you to replace long-term secrets with short-term ones, which helps to significantly reduce the risk of compromise.</span><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_24.jpg\"></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence,&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">creating a secret in AWS Secrets Manager and enabling automatic rotation of the database credentials</strong></b><span>&nbsp;is the most appropriate solution for this scenario.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Create a parameter to the Systems Manager Parameter Store using the PutParameter API with a type of&nbsp;SecureString&nbsp;</strong></b><span>is incorrect because, by default,&nbsp;Systems Manager Parameter Store doesn’t rotate its parameters.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Enable IAM DB authentication which rotates the credentials by default</strong></b><span>&nbsp;is incorrect because this solution&nbsp;only enables the service to connect to Amazon RDS with IAM credentials. It doesn’t have the capability to rotate the credentials like what AWS Secrets Manager does to its secrets.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:</span><i><b><strong class=\"Editor__editor-text-bold___25KrR Editor__editor-text-italic___C9n8O\">&nbsp;</strong></b></i><b><strong class=\"Editor__editor-text-bold___25KrR\">Create an IAM Role which has full access to the database. Attach the role to the services which requires access</strong></b><span>&nbsp;is incorrect because although IAM Role is a preferred way to grant access to certain services, this solution doesn’t rotate the keys/credentials.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://aws.amazon.com/blogs/compute/sharing-secrets-with-aws-lambda-using-aws-systems-manager-parameter-store/\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://aws.amazon.com/blogs/compute/sharing-secrets-with-aws-lambda-using-aws-systems-manager-parameter-store/</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "choices": [
      {
        "id": 1538298,
        "value": "Create a parameter to the Systems Manager Parameter Store using the PutParameter API with a type of SecureString.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538299,
        "value": "Enable IAM DB authentication which rotates the credentials by default.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538300,
        "value": "Create an IAM Role which has full access to the database. Attach the role to the services which require access.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538301,
        "value": "Create a secret in AWS Secrets Manager and enable automatic rotation of the database credentials.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 23,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": false,
        "choiceId": 1538298,
        "questionId": 383600,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383600,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>To improve their information security management system (ISMS), a company recently released a new policy which requires all database credentials to be encrypted and be automatically rotated to avoid unauthorized access.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following is the MOST appropriate solution to secure the credentials?</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447416,
    "question": " S3 bucket",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>An S3 bucket policy is a JSON document that defines access controls for an Amazon S3 bucket. It allows you to grant or deny access to different AWS identities (such as IAM users and roles or federated users) for different S3 bucket actions (such as GetObject, PutObject, and ListBucket) on specific S3 objects or prefixes within a bucket. It can be used to control who can access your S3 data and how they can access it.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;An S3 bucket policy statement is composed of several elements, and the following are required to create a valid policy:</span><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_25.jpg\"></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>–&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Effect</strong></b><span>: The effect can be&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Allow</strong></b><span>&nbsp;or&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Deny</strong></b><span>.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>–&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Action</strong></b><span>: The specific API action for which you are granting or denying permission.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>–&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Principal</strong></b><span>:&nbsp;The user, account, service, or other entity that is allowed or denied access to the bucket or objects within the bucket.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>–&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Resource</strong></b><span>: The resource that’s affected by the action.&nbsp;You specify a resource using an Amazon Resource Name (ARN).</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>In the scenario,&nbsp;you can create separate statements for the Developer and QA roles. This allows for granular control over access to the bucket and its contents. Each statement can have its own set of conditions, allowing for different permissions to be granted to different identities or groups under different circumstances. Additionally, separating statements can make it easier to read, understand and manage the policy as it becomes more complex.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence,&nbsp;the correct answer is:</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">{</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Version\": \"2012-10-17\",</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Statement\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; {</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Effect\": \"Allow\",</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Principal\": {</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"AWS\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"arn:aws:iam::123456789123:role/Developer\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; },</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Action\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"s3:GetObject\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; ],</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Resource\": \"arn:aws:s3:::tdojo/*\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; },</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; {</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Effect\": \"Allow\",</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Principal\": {</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"AWS\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"arn:aws:iam::123456789123:role/QA\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; },</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Action\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"s3:GetObject\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; ],</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Resource\": \"arn:aws:s3:::tdojo/qa/*\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; }</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp; ]</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">}</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The policy below is not compliant with the principle of least privilege, as it uses a wildcard in the Action element. The scenario mentioned that the Developer IAM role must be given permission to read all objects in the bucket. Therefore, you have to explicitly mention the specific API to allow that operation, which is GetObject.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">{</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Version\": \"2012-10-17\",</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Statement\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; {</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Effect\": \"Allow\",</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Principal\": {</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"AWS\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"arn:aws:iam::123456789123:role/Developer\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; },</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Action\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"s3:*\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; ],</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Resource\": \"arn:aws:s3:::tdojo/*\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; },</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; {</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Effect\": \"Allow\",</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Principal\": {</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"AWS\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"arn:aws:iam::123456789123:role/QA\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; },</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Action\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"s3:GetObject\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; ],</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Resource\": \"arn:aws:s3:::tdojo/qa/*\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; }</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp; ]</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">}</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The policy below does not follow the principle of least privilege since it grants excessive permissions to the Developer IAM role. Note that the Developer IAM role only needs read access.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">{</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Version\": \"2012-10-17\",</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Statement\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; {</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Effect\": \"Allow\",</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Principal\": {</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"AWS\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"arn:aws:iam::123456789123:role/Developer\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; },</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Action\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"s3:GetObject\",</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"s3:PutObject\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; ],</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Resource\": \"arn:aws:s3:::tdojo/*\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; },</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; {</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Effect\": \"Allow\",</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Principal\": {</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"AWS\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"arn:aws:iam::123456789123:role/QA\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; },</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Action\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"s3:GetObject\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; ],</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Resource\": \"arn:aws:s3:::tdojo/qa/*\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; }</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp; ]</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">}</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The IAM Policy shown below is not right as it grants the QA role access to read all objects within the S3 bucket, which is typically beyond its necessary permissions:</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">{</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Version\": \"2012-10-17\",</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Statement\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; {</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Effect\": \"Allow\",</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Principal\": {</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"AWS\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"arn:aws:iam::123456789123:role/Developer\",</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"arn:aws:iam::123456789123:role/QA\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; },</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Action\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"s3:GetObject\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; ],</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"Resource\": [</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"arn:aws:s3:::tdojo/*\",</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">\"arn:aws:s3:::tdojo/qa/*\"</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; ]</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;&nbsp;&nbsp; }</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp; ]</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">}</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-iam-policies.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-iam-policies.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "choices": [
      {
        "id": 1538302,
        "value": "<p class=\"Editor__editor-paragraph___HPmFS\"><pre data-highlight-language=\"java\"><code>{\n  “Version”: “2012-10-17”,\n  “Statement”: [\n    {\n    “Effect”: “Allow”,\n    “Principal”: {\n      “AWS”: [\n          “arn:aws:iam::123456789123:role/Developer”,\n          “arn:aws:iam::123456789123:role/QA”\n      ]\n    },\n    “Action”: [\n    “s3:GetObject”\n    ],\n    “Resource”: [\n       “arn:aws:s3:::tdojo/*”,\n       “arn:aws:s3:::tdojo/qa/*”\n    ]\n    }\n  ]\n}\n</code></pre></p>",
        "isCorrect": false,
        "isAdvancedEditor": true,
        "language": "java",
        "responses": []
      },
      {
        "id": 1538303,
        "value": "<p class=\"Editor__editor-paragraph___HPmFS\"><pre data-highlight-language=\"java\"><code>\t{\n  “Version”: “2012-10-17”,\n  “Statement”: [\n    {\n    “Effect”: “Allow”,\n    “Principal”: {\n      “AWS”: [\n          “arn:aws:iam::123456789123:role/Developer”\n      ]\n    },\n    “Action”: [\n    “s3:GetObject”,\n    “s3:PutObject”\n    ],\n    “Resource”: “arn:aws:s3:::tdojo/*”\n    },\n    {\n    “Effect”: “Allow”,\n    “Principal”: {\n      “AWS”: [\n          “arn:aws:iam::123456789123:role/QA”\n      ]\n    },\n    “Action”: [\n    “s3:GetObject”\n    ],\n    “Resource”: “arn:aws:s3:::tdojo/qa/*”\n    }\n  ]\n}\n</code></pre></p>",
        "isCorrect": false,
        "isAdvancedEditor": true,
        "language": "java",
        "responses": []
      },
      {
        "id": 1538304,
        "value": "<p class=\"Editor__editor-paragraph___HPmFS\"><pre data-highlight-language=\"java\"><code>\t{\n  “Version”: “2012-10-17”,\n  “Statement”: [\n    {\n    “Effect”: “Allow”,\n    “Principal”: {\n      “AWS”: [\n          “arn:aws:iam::123456789123:role/Developer”\n      ]\n    },\n    “Action”: [\n    “s3:*”\n    ],\n    “Resource”: “arn:aws:s3:::tdojo/*”\n    },\n    {\n    “Effect”: “Allow”,\n    “Principal”: {\n      “AWS”: [\n          “arn:aws:iam::123456789123:role/QA”\n      ]\n    },\n    “Action”: [\n    “s3:GetObject”\n    ],\n    “Resource”: “arn:aws:s3:::tdojo/qa/*”\n    }\n  ]\n}\n</code></pre></p>",
        "isCorrect": false,
        "isAdvancedEditor": true,
        "language": "java",
        "responses": []
      },
      {
        "id": 1538305,
        "value": "<p class=\"Editor__editor-paragraph___HPmFS\"><pre data-highlight-language=\"java\"><code>{\n  “Version”: “2012-10-17”,\n  “Statement”: [\n    {\n    “Effect”: “Allow”,\n    “Principal”: {\n      “AWS”: [\n          “arn:aws:iam::123456789123:role/Developer”\n      ]\n    },\n    “Action”: [\n    “s3:GetObject”\n    ],\n    “Resource”: “arn:aws:s3:::tdojo/*”\n    },\n    {\n    “Effect”: “Allow”,\n    “Principal”: {\n      “AWS”: [\n          “arn:aws:iam::123456789123:role/QA”\n      ]\n    },\n    “Action”: [\n    “s3:GetObject”\n    ],\n    “Resource”: “arn:aws:s3:::tdojo/qa/*”\n    }\n  ]\n}\n</code></pre></p>",
        "isCorrect": true,
        "isAdvancedEditor": true,
        "language": "java",
        "responses": []
      }
    ],
    "idx": 24,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538305,
        "questionId": 383601,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383601,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A company has created a private S3 bucket named&nbsp;tdojo. The Developer IAM role must be granted read access to all objects within this bucket. However, the QA IAM role should be restricted to accessing only the objects stored under the&nbsp;qa&nbsp;folder.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which S3 bucket policy will effectively implement the principle of least privilege access while satisfying the given requirements?</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447417,
    "question": "SCP",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The IAM policy simulator evaluates the policies that you choose and determines the effective permissions for each of the actions that you specify. The simulator uses the same policy evaluation engine that is used during real requests to AWS services. But the simulator differs from the live AWS environment in the following ways:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– The simulator does not make an actual AWS service request, so you can safely test requests that might make unwanted changes to your live AWS environment.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Because the simulator does not simulate running the selected actions, it cannot report any response to the simulated request. The only result returned is whether the requested action would be allowed or denied.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– If you edit a policy inside the simulator, these changes affect only the simulator. The corresponding policy in your AWS account remains unchanged.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://teams.microsoft.com/l/message/19:1a57375a-c5f3-494c-a6f7-ef7f9182bcbd_68590123-448a-49f9-8cf1-6123d90d4703@unq.gbl.spaces/1741968258154?context=%7B%22contextType%22%3A%22chat%22%7D\" rel=\"noopener\" class=\"Editor__editor-link___3vl2C\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Check oCheck out this video on IAM Policy Simulator:ut this video on IAM Policy Simulator:</strong></b></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><br></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>With the IAM policy simulator, you can test and troubleshoot IAM and resource-based policies in the following ways:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Test policies that are attached to IAM users, groups, or roles in your AWS account. If more than one policy is attached to the user, group, or role, you can test all the policies, or select individual policies to test. You can test which actions are allowed or denied by the selected policies for specific resources.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Test policies that are attached to AWS resources, such as Amazon S3 buckets, Amazon SQS queues, Amazon SNS topics, or Amazon S3 Glacier vaults.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– If your AWS account is a member of an organization in&nbsp;</span><a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>AWS Organizations</span></a><span>, then you can test the impact of service control policies (SCPs) on your IAM policies and resource policies.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Test new policies that are not yet attached to a user, group, or role by typing or copying them into the simulator. These are used only in the simulation and are not saved. Take note that you cannot type or copy a resource-based policy into the simulator. To use a resource-based policy in the simulator, you must include the resource in the simulation and select the checkbox to include that resource’s policy in the simulation.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Test the policies with selected services, actions, and resources. For example, you can test to ensure that your policy allows an entity to perform the&nbsp;ListAllMyBuckets,&nbsp;CreateBucket, and&nbsp;DeleteBucket&nbsp;actions in the Amazon S3 service on a specific bucket.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Simulate real-world scenarios by providing context keys, such as an IP address or date, that are included in&nbsp;Condition&nbsp;elements in the policies being tested.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– Identify which specific statement in a policy results in allowing or denying access to a particular resource or action.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;Hence, the correct answer is&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">IAM Policy Simulator</strong></b><span>.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">AWS Config</strong></b><span>&nbsp;is incorrect because this is just a service that enables you to assess, audit, and evaluate the configurations of your&nbsp;AWS resources.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Systems Manager&nbsp;</strong></b><span>is incorrect because this service just&nbsp;provides a unified user interface so you can view operational data from multiple AWS services and allows you to automate operational tasks across your AWS resources. Unlike IAM Policy Simulator, it can’t be used to simulate your policies.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Amazon Inspector&nbsp;</strong></b><span>is incorrect because it is just an automated security assessment service that helps improve the security and compliance of applications deployed on AWS.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_iam_policy-sim-path-console.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_iam_policy-sim-path-console.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;</strong></b></p>",
    "choices": [
      {
        "id": 1538306,
        "value": "Amazon Inspector",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538307,
        "value": "Systems Manager",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538308,
        "value": "AWS Config",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538309,
        "value": "IAM Policy Simulator",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 25,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538309,
        "questionId": 383602,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383602,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A company is using AWS Organizations to manage its multiple AWS accounts which is being used by its various departments. To avoid security issues, it is of utmost importance to test the impact of service control policies (SCPs) on your IAM policies and resource policies before applying them.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following services can you use to test and troubleshoot IAM and resource-based policies?</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447418,
    "question": "API Gateway",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A Lambda authorizer is an API Gateway feature that uses a Lambda function to control access to your API. When a client makes a request to one of your API’s methods, API Gateway calls your Lambda authorizer, which takes the caller’s identity as input and returns an IAM policy as output.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>There are two types of Lambda authorizers:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;– A&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">token-based</strong></b><span>&nbsp;Lambda authorizer (also called a TOKEN authorizer) receives the caller’s identity in a bearer token, such as a JSON Web Token (JWT) or an OAuth token.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;– A&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">request parameter-based</strong></b><span>&nbsp;Lambda authorizer (also called a REQUEST authorizer) receives the caller’s identity in a combination of headers, query string parameters, stageVariables, and $context variables.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;It is possible to use an AWS Lambda function from an AWS account that is different from the one in which you created your Lambda authorizer function by using a Cross-Account Lambda Authorizer.</span><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_27.jpg\"></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Therefore, the correct answer in this scenario is to use&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Lambda Authorizers</strong></b><span>&nbsp;since this feature is useful if you want to implement a custom authorization scheme that uses a bearer token authentication strategy such as OAuth or SAML.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Resource Policy&nbsp;</strong></b><span>is incorrect because this is simply a JSON policy document that you attach to an API to control whether a specified principal (typically an IAM user or role) can invoke the API. This can’t be used to implement a custom authorization scheme.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Cross-Origin Resource Sharing (CORS)&nbsp;</strong></b><span>is incorrect because this just defines a way for client web applications that are loaded in one domain to interact with resources in a different domain.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Cross-Account Lambda Authorizer&nbsp;</strong></b><span>is incorrect because this just enables you to use an AWS Lambda function from a different AWS account as your API authorizer function. Moreover, this is not a valid&nbsp;Lambda authorizer type.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-lambda-authorizer-input.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-lambda-authorizer-input.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-lambda-authorizer-cross-account-lambda-authorizer.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-lambda-authorizer-cross-account-lambda-authorizer.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "choices": [
      {
        "id": 1538310,
        "value": "Lambda Authorizers",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538311,
        "value": "Cross-Origin Resource Sharing (CORS)",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538312,
        "value": "Cross-Account Lambda Authorizer",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538313,
        "value": "Resource Policy",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 26,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538310,
        "questionId": 383603,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383603,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A software engineer is building a serverless application in AWS consisting of Lambda, API Gateway, and DynamoDB. She needs to implement a custom authorization scheme that uses a bearer token authentication strategy such as OAuth or SAML to determine the caller’s identity.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the features of API Gateway is the MOST suitable one that she should use to build this feature?</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447419,
    "question": "RDS for SQL Server",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Amazon RDS supports using Transparent Data Encryption (TDE) to encrypt stored data on your DB instances running Microsoft SQL Server. TDE automatically encrypts data before it is written to storage, and automatically decrypts data when the data is read from storage.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Amazon RDS supports TDE for the following SQL Server versions and editions:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– SQL Server 2019 Standard and Enterprise Editions</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– SQL Server 2017 Enterprise Edition</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– SQL Server 2016 Enterprise Edition</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– SQL Server 2014 Enterprise Edition</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>– SQL Server 2012 Enterprise Edition</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Transparent Data Encryption is used in scenarios where you need to encrypt sensitive data. For example, you might want to provide data files and backups to a third party, or address security-related regulatory compliance issues.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>To enable transparent data encryption for an RDS SQL Server DB instance, specify the TDE option in an RDS option group that is associated with that DB instance.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Transparent data encryption for SQL Server provides encryption key management by using a two-tier key architecture. A certificate, which is generated from the database master key, is used to protect the data encryption keys. The database encryption key performs the actual encryption and decryption of data on the user database. Amazon RDS backs up and manages the database master key and the TDE certificate. To comply with several security standards, Amazon RDS is working to implement automatic periodic master key rotation.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;TDE encrypts the actual data and log files at the database level.&nbsp;It automatically encrypts data before it is written to storage and automatically decrypts data when it is read from storage.&nbsp;Lastly, TDE provides encryption at the data level, protecting the data itself from unauthorized access.</span><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_28.jpg\"></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence, the correct answer is to&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Enable Transparent Data Encryption (TDE)</strong></b><i><b><strong class=\"Editor__editor-text-bold___25KrR Editor__editor-text-italic___C9n8O\">.</strong></b></i></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Use IAM DB Authentication&nbsp;</strong></b><span>is incorrect because&nbsp;this option just lets you authenticate to your DB instance using AWS Identity and Access Management (IAM) database authentication. The more appropriate security feature to use here is TDE.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Enable RDS Encryption</strong></b><span>&nbsp;is incorrect. This option enables encryption at rest for the underlying storage volumes, but it does not automatically encrypt and decrypt the data itself. It relies on the database engine (in this case, SQL Server) to handle the encryption and decryption of the actual data.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Use Microsoft SQL Server Windows Authentication</strong></b><i><b><strong class=\"Editor__editor-text-bold___25KrR Editor__editor-text-italic___C9n8O\">&nbsp;</strong></b></i><span>is incorrect because&nbsp;this option is primarily used if you want to integrate RDS with your AWS Directory Service for Microsoft Active Directory (also called AWS Managed Microsoft AD) to enable Windows Authentication to authenticate users.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.SQLServer.Options.TDE.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.SQLServer.Options.TDE.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "choices": [
      {
        "id": 1538314,
        "value": "Enable Transparent Data Encryption (TDE).",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538315,
        "value": "Use IAM DB Authentication",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538316,
        "value": "Enable RDS Encryption.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538317,
        "value": "Use Microsoft SQL Server Windows Authentication.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 27,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538314,
        "questionId": 383604,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383604,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A web application is currently using an on-premises Microsoft SQL Server 2019 Enterprise Edition database. Your manager instructed you to migrate the application to Elastic Beanstalk and the database to RDS for SQL Server. For additional security, you must configure your database to automatically encrypt the actual data before it is written to storage, and automatically decrypt data when the data is read from storage.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following services will you use to achieve this?</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447420,
    "question": "KMS Key",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>When you encrypt your data, your data is protected, but you have to protect your encryption key. One strategy is to encrypt it.&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Envelope encryption</strong></b><span>&nbsp;is the practice of encrypting plaintext data with a data key and then encrypting the data key under another key.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_29.jpg\"><span>You can even encrypt the data encryption key under another encryption key, and encrypt that encryption key under another encryption key. But, eventually, one key must remain in plaintext so you can decrypt the keys and your data. This top-level plaintext key encryption key is known as the&nbsp;</span><i><em class=\"Editor__editor-text-italic___C9n8O\">root key</em></i><span>.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">AWS KMS</strong></b><span>&nbsp;helps you protect your encryption keys by storing and managing them securely. Root keys stored in AWS KMS, known as AWS KMS keys, never leave the AWS KMS FIPS validated hardware security modules unencrypted. To use an AWS KMS key, you must call AWS KMS.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Envelope encryption offers several benefits:</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Protecting data keys</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>When you encrypt a data key, you don’t have to worry about storing the encrypted data key, because the data key is inherently protected by encryption. You can safely store the encrypted data key alongside the encrypted data.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Encrypting the same data under multiple keys</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Encryption operations can be time-consuming, particularly when the data being encrypted are large objects. Instead of re-encrypting raw data multiple times with different keys, you can re-encrypt only the data keys that protect the raw data.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Combining the strengths of multiple algorithms</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>In general, symmetric key algorithms are faster and produce smaller ciphertexts than public-key algorithms, but public-key algorithms provide inherent separation of roles and easier key management. Envelope encryption lets you combine the strengths of each strategy.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Therefore, the correct answer is:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Encrypt plaintext data with a data key and then encrypt the data key with a top-level plaintext key.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Encrypt plaintext data with a KMS key and then encrypt the KMS key with a top-level plaintext data key</strong></b><span>&nbsp;is incorrect because you have to encrypt your plaintext data with a data key and not a KMS key. Moreover, the top-level plaintext key should be the root key and not the data key.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Encrypt plaintext data with a KMS key and then encrypt the KMS key with a top-level encrypted data key</strong></b><span>&nbsp;is incorrect because plaintext data should be encrypted with a data key, not a KMS key. Also, the top-level key should be plaintext, not encrypted.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Encrypt plaintext data with a data key and then encrypt the data key with a top-level encrypted key</strong></b><span>&nbsp;is incorrect. While it is correct to encrypt plaintext data with a data key, the top-level key (root key) must be kept in plaintext and not be encrypted.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#enveloping\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#enveloping</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/overview.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/kms/latest/developerguide/overview.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "choices": [
      {
        "id": 1538318,
        "value": "Encrypt plaintext data with a KMS key and then encrypt the KMS key with a top-level plaintext data key.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538319,
        "value": "Encrypt plaintext data with a data key and then encrypt the data key with a top-level encrypted key",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538320,
        "value": "Encrypt plaintext data with a data key and then encrypt the data key with a top-level plaintext key.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538321,
        "value": "Encrypt plaintext data with a KMS key and then encrypt the KMS key with a top-level encrypted data key.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 28,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": true,
        "choiceId": 1538320,
        "questionId": 383605,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383605,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Your development team is currently developing a financial application in AWS. One of the requirements is to create and control the encryption keys used to encrypt your data using the envelope encryption strategy to comply with the strict IT security policy of the company.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following correctly describes the process of envelope encryption?</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  },
  {
    "answerId": 38447421,
    "question": "Amazon Lightsail and S3",
    "questionClass": "EDU",
    "hint": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A signed URL contains extra information, such as an expiration date and time, providing greater control over access to your content. This additional information is presented in a policy statement, which is derived from either a predefined (canned) policy or a personalized (custom) policy.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>CloudFront signed cookies allow you to control who can access your content when you don’t want to change your current URLs or when you want to provide access to multiple restricted files, such as all of the files in a website’s subscribers’ area. This topic explains the considerations when using signed cookies and describes how to set signed cookies using canned and custom policies.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The most effective method to control unauthorized access to the photos and manage data transfer costs is to use a CloudFront web distribution with signed URLs or signed cookies. This approach allows the startup to enforce access controls at the CDN layer, ensuring that only authorized users can access the content.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>&nbsp;By using CloudFront with signed URLs or signed cookies, the startup can manage access effectively, providing a scalable solution that prevents unauthorized use while controlling data transfer costs. The use of CloudFront Functions to validate referrer headers adds an extra layer of security, ensuring that the photos are only accessible through authorized channels, thereby protecting the startup’s content and reducing unnecessary data transfer costs.</span><img src=\"http://static.cdn.epam.com/uploads/edd5f87315fbce8b3b6bc0b7376c0f0e/Security/hint_30ex.jpg\"></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Hence, the correct answer is:&nbsp;</span><b><strong class=\"Editor__editor-text-bold___25KrR\">Use a CloudFront web distribution with signed URLs or signed cookies.</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:</span><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;Enable cross-origin resource sharing (CORS) which allows cross-origin GET requests from all origins&nbsp;</strong></b><span>is incorrect as this will actually make the problem worse since you are allowing any website or origin to fetch the objects in the S3 bucket. Although using CORS is a valid solution, it should be properly configured to only enable access to your trusted domains.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>The option that says:</span><b><strong class=\"Editor__editor-text-bold___25KrR\">&nbsp;Configure the S3 bucket to remove public read access and use pre-signed URLs with expiry dates&nbsp;</strong></b><span>is incorrect because it is not scalable for large numbers of objects, as it would require generating pre-signed URLs for potentially thousands or millions of objects, making it impractical.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">Blocking the IP addresses of the offending websites using Network Access Control List&nbsp;</strong></b><span>is incorrect because a quick change in IP address would easily bypass this configuration; hence, this is not an efficient method to implement.</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><b><strong class=\"Editor__editor-text-bold___25KrR\">References:&nbsp;</strong></b></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-signed-urls.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-signed-urls.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecurityAndPrivateContent.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecurityAndPrivateContent.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\" target=\"_blank\" class=\"Editor__editor-link___3vl2C\"><span>https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html</span></a></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "choices": [
      {
        "id": 1538322,
        "value": "Use a CloudFront web distribution with signed URLs or signed cookies.",
        "isCorrect": true,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538323,
        "value": "Enable cross-origin resource sharing (CORS) which allows cross-origin GET requests from all origins.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538324,
        "value": "Block the IP addresses of the offending websites using Network Access Control List.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      },
      {
        "id": 1538325,
        "value": "Configure the S3 bucket to remove public read access and use pre-signed URLs with expiry dates.",
        "isCorrect": false,
        "isAdvancedEditor": false,
        "language": "",
        "responses": []
      }
    ],
    "idx": 29,
    "type": "SINGLE",
    "userAnswers": [
      {
        "isCorrect": false,
        "choiceId": 1538325,
        "questionId": 383606,
        "response": null,
        "answerFeedback": null
      }
    ],
    "exact": null,
    "isFinalScore": false,
    "media": {
      "audioUrl": null,
      "pictureUrl": null,
      "videoUrl": null
    },
    "score": null,
    "questionId": 383606,
    "description": "<p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>A startup has recently launched a high-quality photo sharing portal using Amazon Lightsail and S3. They noticed that there are other external websites which are linking and using their photos without permission. This has caused an increase on their data transfer cost and potential revenue loss.</span></p><p class=\"Editor__editor-paragraph___HPmFS\" dir=\"ltr\"><span>Which of the following is the MOST effective method to solve this issue?</span></p><p class=\"Editor__editor-paragraph___HPmFS\"><span>&nbsp;</span></p>",
    "language": "java",
    "file": null,
    "noMatchResponses": [],
    "answerReview": null,
    "answerFeedbacks": [],
    "topic": {
      "id": 8094,
      "name": "Security ",
      "skillId": "",
      "categoryId": 1610
    }
  }
]